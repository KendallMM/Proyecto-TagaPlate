Index: parseTree.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\n\ntree_text = '\\n'\ninitialized_variables = []\nerr = ''\n\n\nclass Node:\n    pass\n\n\nclass NullNode(Node):\n    def __init__(self):\n        self.name = 'Null'\n\n    def printtxt(self, ident1, ident2):\n        return self.name + ']'\n\n\nclass Program(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.name = name\n\n    def printtxt(self, ident1):\n        global tree_text\n        tree_text += '[' + self.name + '\\n' + ident1\n\n        tree_text += '[' + self.son1 + ']' + '\\n' + ident1\n        tree_text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        tree_text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        tree_text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        tree_text += ']'\n\n        print(tree_text)\n\n\nclass Principal(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.name = name\n        self.initialized_variables = []\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def initialize(self, name, typo, value):\n        self.initialized_variables.append([name, typo, value])\n\n\nclass Procedures(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.name = name\n        self.initialized_variables = []\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions1(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.son9 = son9\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son7 + ']' + '\\n' + ident1\n        text += '[' + self.son8 + ']' + '\\n' + ident1\n        text += '[' + self.son9.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        #Valor asignado\n        print(self.son4.son1)\n        print(self.son6.son1)\n        if self.son4.son1 == 'Num' and (self.son6.son1 == 'True' or self.son6.son1 == 'False'):\n            err = 'Semantic error: Boolean value cannot be assigned to numeric variable'\n        elif self.son4.son1 == 'Bool' and re.search('\\d+', self.son6.son1):\n            err = 'Semantic error: Number value cannot be assigned to boolean variable'\n\n\nclass Instructions2(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7 + ']' + '\\n' + ident1\n        text += '[' + self.son8.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n\n\n\nclass Instructions3(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, son10, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.son9 = son9\n        self.son10 = son10\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son8 + ']' + '\\n' + ident1\n        text += '[' + self.son9 + ']' + '\\n' + ident1\n        text += '[' + self.son10.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    #def semantics(self):\n     #   global err\n      #  if self.son7.son1 == 'True' or self.son7.son1 == 'False':\n       #     err = 'Semantic error: Cannot operate boolean value in Alter function.'\n\n\nclass Instructions4(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        if re.search('\\d+', self.son3.son1):\n            err = 'Semantic error: Cannot operate numeric value in AlterB function.'\n\n\nclass Instructions5(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions6(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions7(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions8(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions9(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions10(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions11(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions12(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions13(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions14(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions15(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions16(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass DataType1(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass DataType2(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value1(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value2(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value3(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value4(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son8 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Operator1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Operator2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Operator3(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Operator4(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator3(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator4(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator5(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator6(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position3(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position4(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass RepeatInstructions(Node):\n    def __init__(self, son1, son2, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass UntilBody(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass WhileBody(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass CaseBody1(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.son9 = son9\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7 + ']' + '\\n' + ident1\n        text += '[' + self.son8.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son9 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass CaseBody2(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass CaseBody3(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass InnerCaseBody1(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass InnerCaseBody2(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass InnerCaseBody3(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition1(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition2(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition3(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition4(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition5(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition6(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition7(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass IsTrue(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass PrintStart(Node):\n    def __init__(self, son1, son2, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass PrintValues1(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass PrintValues2(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass StartValue1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass StartValue2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parseTree.py b/parseTree.py
--- a/parseTree.py	(revision 6cc1c8fbed3ca18145b0ff58468676a168c2c1de)
+++ b/parseTree.py	(date 1663604082083)
@@ -197,10 +197,11 @@
         text += ident2 + ']'
         return text
 
-    #def semantics(self):
-     #   global err
-      #  if self.son7.son1 == 'True' or self.son7.son1 == 'False':
-       #     err = 'Semantic error: Cannot operate boolean value in Alter function.'
+    def semantics(self):
+        global err
+        print("Este"+self.son7.son1)
+        if self.son7.son1 == 'True' or self.son7.son1 == 'False':
+            err = 'Semantic error: Cannot operate boolean value in Alter function.'
 
 
 class Instructions4(Node):
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"ba0523e4-c17a-499c-8c9d-9960f72ac75a\" name=\"Changes\" comment=\"Parse tree finished\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Pruebas/Prueba real.tgp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Pruebas/Prueba real.tgp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/parseTree.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/parseTree.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/syntaxAnalyzer.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/syntaxAnalyzer.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/tagaplate.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/tagaplate.py\" afterDir=\"false\" />\n    </list>\n    <list id=\"d289ab5a-7313-47ee-a93d-6e4c01cc87a9\" name=\"Changes by kendall\" comment=\"Changes by kendall\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2DYNp5yAo8r1mYvA5FRstFNRJVj\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Usuario/Documents/GitHub/Proyecto-TagaPlate/ply-3.11&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\ply-3.11\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\TagaPlate Compiler\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Python.tagaplate\">\n    <configuration name=\"TagaPlate IDE\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/TagaPlate IDE.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"lexicalAnalyzer\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/lexicalAnalyzer.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"semanticAnalyzer\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/semanticAnalyzer.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"syntaxAnalyzer\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/syntaxAnalyzer.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"tagaplate\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/tagaplate.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.syntaxAnalyzer\" />\n        <item itemvalue=\"Python.lexicalAnalyzer\" />\n        <item itemvalue=\"Python.TagaPlate IDE\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"ba0523e4-c17a-499c-8c9d-9960f72ac75a\" name=\"Changes\" comment=\"\" />\n      <created>1660872241387</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1660872241387</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Create tokens\">\n      <created>1660874868234</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1660874868234</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Analizador léxico finalizado\">\n      <created>1661321864220</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661321864220</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Analizador léxico finalizado v2\">\n      <created>1661406783620</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661406783620</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"sintactico empezado\">\n      <created>1661408481919</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661408481919</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Sintactico terminado v2\">\n      <created>1661836420490</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661836420490</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"semanticAnalyzer.py sin terminar\">\n      <created>1662182790055</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662182790055</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"tagaplate.py mejorado\">\n      <created>1662423121919</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662423121919</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"tagaplate.py comentado\">\n      <created>1662423927583</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662423927583</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"tagaplate.py mejorado v2\">\n      <created>1662431941122</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662431941122</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"tagaplate.py mejorado v3\">\n      <created>1662433964845</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662433964845</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"tagaplate.py mejorado v4\">\n      <created>1662434368332</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662434368332</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"cambios varios\">\n      <created>1662437912956</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662437912956</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Se sigue avanzando el desarrollo del Analizador Semantico\">\n      <created>1662520562534</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662520562534</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Se continuo el desarrollo del analizador semantico\">\n      <created>1662607177796</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662607177796</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"fix sintax analysis for print function\">\n      <created>1662785954621</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662785954621</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Add classes to parse tree\">\n      <created>1662877853729</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662877853730</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Build parse tree\">\n      <created>1663048564191</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663048564191</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"Parse tree finished\">\n      <created>1663126414270</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663126414270</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"Changes by kendall\">\n      <created>1663126430226</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663126430226</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"20\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Create tokens\" />\n    <MESSAGE value=\"Analizador léxico finalizado\" />\n    <MESSAGE value=\"Analizador léxico finalizado v2\" />\n    <MESSAGE value=\"sintactico empezado\" />\n    <MESSAGE value=\"Sintactico terminado v2\" />\n    <MESSAGE value=\"semanticAnalyzer.py sin terminar\" />\n    <MESSAGE value=\"tagaplate.py mejorado\" />\n    <MESSAGE value=\"tagaplate.py comentado\" />\n    <MESSAGE value=\"tagaplate.py mejorado v2\" />\n    <MESSAGE value=\"tagaplate.py mejorado v3\" />\n    <MESSAGE value=\"tagaplate.py mejorado v4\" />\n    <MESSAGE value=\"cambios varios\" />\n    <MESSAGE value=\"Se sigue avanzando el desarrollo del Analizador Semantico\" />\n    <MESSAGE value=\"Se continuo el desarrollo del analizador semantico\" />\n    <MESSAGE value=\"fix sintax analysis for print function\" />\n    <MESSAGE value=\"Add classes to parse tree\" />\n    <MESSAGE value=\"Build parse tree\" />\n    <MESSAGE value=\"Parse tree finished\" />\n    <MESSAGE value=\"Changes by kendall\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Changes by kendall\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6cc1c8fbed3ca18145b0ff58468676a168c2c1de)
+++ b/.idea/workspace.xml	(date 1663647962187)
@@ -4,12 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ba0523e4-c17a-499c-8c9d-9960f72ac75a" name="Changes" comment="Parse tree finished">
+    <list default="true" id="ba0523e4-c17a-499c-8c9d-9960f72ac75a" name="Changes" comment="Build parse tree">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Pruebas/Prueba real.tgp" beforeDir="false" afterPath="$PROJECT_DIR$/Pruebas/Prueba real.tgp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/parseTree.py" beforeDir="false" afterPath="$PROJECT_DIR$/parseTree.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/syntaxAnalyzer.py" beforeDir="false" afterPath="$PROJECT_DIR$/syntaxAnalyzer.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/tagaplate.py" beforeDir="false" afterPath="$PROJECT_DIR$/tagaplate.py" afterDir="false" />
     </list>
     <list id="d289ab5a-7313-47ee-a93d-6e4c01cc87a9" name="Changes by kendall" comment="Changes by kendall" />
     <option name="SHOW_DIALOG" value="false" />
@@ -150,7 +148,7 @@
       <envs>
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
-      <option name="SDK_HOME" value="C:\Users\Usuario\Documents\GitHub\Proyecto-TagaPlate\venv\Scripts\python.exe" />
+      <option name="SDK_HOME" value="/usr/bin/python3.8" />
       <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
       <option name="IS_MODULE_SDK" value="false" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
Index: Pruebas/Prueba real.tgp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- Este es un programa de prueba\n\n@Principal(\n New @var1(Bool, False);\n Alter(@var1, ADD, 1);\n AlterB(False);\n While 1 >= True (\n  -- Algo\n );\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pruebas/Prueba real.tgp b/Pruebas/Prueba real.tgp
--- a/Pruebas/Prueba real.tgp	(revision 6cc1c8fbed3ca18145b0ff58468676a168c2c1de)
+++ b/Pruebas/Prueba real.tgp	(date 1663604016844)
@@ -2,9 +2,9 @@
 
 @Principal(
  New @var1(Bool, False);
- Alter(@var1, ADD, 1);
+ Alter(@var1, ADD, 3);
  AlterB(False);
- While 1 >= True (
+ While 1 >= 5 (
   -- Algo
  );
 );
@@ -26,3 +26,5 @@
 
 
 
+
+
