Index: SyntaxAnalyzer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import ply.yacc as yacc\nfrom LexicalAnalyzer import tokens\nfrom ParseTree import *\n\nerr = ''\nerrorCounter = 0\nsem_tree = None\n\n\ndef p_program(p):\n    '''program : COMMENT procedures principal procedures end'''\n    p[0] = Program(p[1], p[2], p[3], p[4], p[5], 'Program')\n    global sem_tree\n    sem_tree = p[0]\n\n\ndef p_principal(p):\n    '''principal : PRINCIPAL LPARENT instructions RPARENT SEMICOLON'''\n    p[0] = Principal(p[1], p[2], p[3], p[4], p[5], 'Principal')\n\n\ndef p_principalEmpty(p):\n    '''principal : empty'''\n    global err, errorCounter\n    err = \"Syntax error: Principal method not found.\"\n    errorCounter = errorCounter + 2\n    p[0] = NullNode()\n\n\ndef p_procedures(p):\n    '''procedures : PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures'''\n    p[0] = Procedures(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'Procedure')\n\n\ndef p_proceduresEmpty(p):\n    '''procedures : empty'''\n    p[0] = NullNode()\n\n\ndef p_instructions1(p):\n    '''instructions : instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary'''\n    p[0] = Instructions1(p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[1], 'Instructions1')\n\n\ndef p_instructions2(p):\n    '''instructions : instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary'''\n    p[0] = Instructions2(p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[1], 'Instructions2')\n    global children\n    children = len(p) - 1\n    print(children)\n\n\ndef p_instructions3(p):\n    '''instructions : instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary'''\n    p[0] = Instructions3(p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[1], 'Instructions3')\n    global children\n    children = len(p) - 1\n    print(children)\n\n\ndef p_instructions4(p):\n    '''instructions : instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary'''\n    p[0] = Instructions4(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions4')\n\n\ndef p_instructions5(p):\n    '''instructions : instructions MOVR SEMICOLON commentary'''\n    p[0] = Instructions5(p[2], p[3], p[4], p[1], 'Instructions5')\n\n\ndef p_instructions6(p):\n    '''instructions : instructions MOVL SEMICOLON commentary'''\n    p[0] = Instructions6(p[2], p[3], p[4], p[1], 'Instructions6')\n\n\ndef p_instructions7(p):\n    '''instructions : instructions HAMMER LPARENT position RPARENT SEMICOLON commentary'''\n    p[0] = Instructions7(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions7')\n\n\ndef p_instructions8(p):\n    '''instructions : instructions STOP SEMICOLON commentary'''\n    p[0] = Instructions8(p[2], p[3], p[4], p[1], 'Instructions8')\n\n\ndef p_instructions9(p):\n    '''instructions : instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary'''\n    p[0] = Instructions9(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions9')\n\n\ndef p_instructions10(p):\n    '''instructions : instructions untilbody SEMICOLON commentary'''\n    p[0] = Instructions10(p[2], p[3], p[4], p[1], 'Instructions10')\n\n\ndef p_instructions11(p):\n    '''instructions : instructions whilebody SEMICOLON commentary'''\n    p[0] = Instructions11(p[2], p[3], p[4], p[1], 'Instructions11')\n\n\ndef p_instructions12(p):\n    '''instructions : instructions casebody SEMICOLON commentary'''\n    p[0] = Instructions12(p[2], p[3], p[4], p[1], 'Instructions12')\n\n\ndef p_instructions13(p):\n    '''instructions : instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary'''\n    p[0] = Instructions13(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions13')\n\n\ndef p_instructions14(p):\n    '''instructions : instructions istrue SEMICOLON commentary'''\n    p[0] = Instructions14(p[2], p[3], p[4], p[1], 'Instructions14')\n\n\ndef p_instructions15(p):\n    '''instructions : instructions CALL LPARENT ID RPARENT SEMICOLON commentary'''\n    p[0] = Instructions15(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions15')\n\n\ndef p_instructionsEmpty(p):\n    '''instructions : empty'''\n    p[0] = NullNode()\n\n\ndef p_commentary1(p):\n    '''commentary : COMMENT'''\n    p[0] = Commentary1(p[1], 'Commentary1')\n\ndef p_commentary2(p):\n    '''commentary : empty'''\n    p[0] = NullNode()\n\ndef p_datatype1(p):\n    '''datatype : NUMVAL'''\n    p[0] = DataType1(p[1], 'DataType1')\n\n\ndef p_datatype2(p):\n    '''datatype : BOOLVAL'''\n    p[0] = DataType2(p[1], 'DataType2')\n\n\ndef p_value1(p):\n    '''value : NUMBER'''\n    p[0] = Value1(p[1], 'Value1')\n\n\ndef p_value2(p):\n    '''value : TRUE'''\n    p[0] = Value2(p[1], 'Value2')\n\n\ndef p_value3(p):\n    '''value : FALSE'''\n    p[0] = Value3(p[1], 'Value3')\n\n\ndef p_value4(p):\n    '''value : ALTER LPARENT ID COMMA operator COMMA value RPARENT'''\n    p[0] = Value4(p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], 'Value4')\n\n\ndef p_operator1(p):\n    '''operator : ADD'''\n    p[0] = Operator1(p[1], 'Operator1')\n\n\ndef p_operator2(p):\n    '''operator : SUB'''\n    p[0] = Operator2(p[1], 'Operator2')\n\n\ndef p_operator3(p):\n    '''operator : MUL'''\n    p[0] = Operator3(p[1], 'Operator3')\n\n\ndef p_operator4(p):\n    '''operator : DIV'''\n    p[0] = Operator4(p[1], 'Operator4')\n\n\ndef p_comparator1(p):\n    '''comparator : GT'''\n    p[0] = Comparator1(p[1], 'Comparator1')\n\n\ndef p_comparator2(p):\n    '''comparator : LT'''\n    p[0] = Comparator2(p[1], 'Comparator2')\n\n\ndef p_comparator3(p):\n    '''comparator : GET'''\n    p[0] = Comparator3(p[1], 'Comparator3')\n\n\ndef p_comparator4(p):\n    '''comparator : LET'''\n    p[0] = Comparator4(p[1], 'Comparator4')\n\n\ndef p_comparator5(p):\n    '''comparator : EQ'''\n    p[0] = Comparator5(p[1], 'Comparator5')\n\n\ndef p_comparator6(p):\n    '''comparator : DT'''\n    p[0] = Comparator6(p[1], 'Comparator6')\n\n\ndef p_position1(p):\n    '''position : NORTH'''\n    p[0] = Position1(p[1], 'Position1')\n\n\ndef p_position2(p):\n    '''position : SOUTH'''\n    p[0] = Position2(p[1], 'Position2')\n\n\ndef p_position3(p):\n    '''position : EAST'''\n    p[0] = Position3(p[1], 'Position3')\n\n\ndef p_position4(p):\n    '''position : WEST'''\n    p[0] = Position4(p[1], 'Position4')\n\n\ndef p_repeatInstructions(p):\n    '''repeat_instructions : instructions BREAK'''\n    p[0] = RepeatInstructions(p[1], p[2], 'RepeatInstructions')\n\n\ndef p_untilbody(p):\n    '''untilbody : UNTIL LPARENT instructions RPARENT condition'''\n    p[0] = UntilBody(p[1], p[2], p[3], p[4], p[5], 'UntilBody')\n\n\ndef p_whilebody(p):\n    '''whilebody : WHILE condition LPARENT instructions RPARENT'''\n    p[0] = WhileBody(p[1], p[2], p[3], p[4], p[5], 'WhileBody')\n\n\ndef p_casebody1(p):\n    '''casebody : CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody'''\n    p[0] = CaseBody1(p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], 'CaseBody1')\n\ndef p_casebody2(p):\n    '''casebody : case_else'''\n    p[0] = CaseBody2(p[1], 'CaseBody2')\n\n\ndef p_case_else1(p):\n    '''case_else : ELSE LPARENT instructions RPARENT'''\n    p[0] = CaseElse1(p[1], p[2], p[3], p[4], 'CaseElse1')\n\n\ndef p_case_else2(p):\n    '''case_else : empty'''\n    p[0] = NullNode()\n\n\ndef p_casebody3(p):\n    '''casebody : CASE ID innercasebody'''\n    p[0] = CaseBody3(p[1], p[2], p[3], 'CaseBody3')\n\n\ndef p_innercasebody1(p):\n    '''innercasebody : WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody'''\n    p[0] = InnerCaseBody1(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'InnerCaseBody1')\n\n\ndef p_innercasebody2(p):\n    '''innercasebody : WHEN TRUE THEN LPARENT instructions RPARENT innercasebody'''\n    p[0] = InnerCaseBody2(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'InnerCaseBody2')\n\n\ndef p_innercasebody3(p):\n    '''innercasebody : WHEN FALSE THEN LPARENT instructions RPARENT innercasebody'''\n    p[0] = InnerCaseBody3(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'InnerCaseBody3')\n\n\ndef p_innercasebodyEmpty(p):\n    '''innercasebody : empty'''\n\n\ndef p_condition1(p):\n    '''condition : ID comparator ID'''\n    p[0] = Condition1(p[1], p[2], p[3], 'Condition1')\n\n\ndef p_condition2(p):\n    '''condition : ID comparator NUMBER'''\n    p[0] = Condition2(p[1], p[2], p[3], 'Condition2')\n\n\ndef p_condition3(p):\n    '''condition : NUMBER comparator ID'''\n    p[0] = Condition3(p[1], p[2], p[3], 'Condition3')\n\n\ndef p_condition4(p):\n    '''condition : NUMBER comparator NUMBER'''\n    p[0] = Condition4(p[1], p[2], p[3], 'Condition4')\n\n\ndef p_condition5(p):\n    '''condition : TRUE'''\n    p[0] = Condition5(p[1], 'Condition5')\n\n\ndef p_condition6(p):\n    '''condition : FALSE'''\n    p[0] = Condition6(p[1], 'Condition6')\n\n\ndef p_condition7(p):\n    '''condition : istrue'''\n    p[0] = Condition7(p[1], 'Condition7')\n\n\ndef p_istrue(p):\n    '''istrue : VERT LPARENT ID RPARENT'''\n    p[0] = IsTrue(p[1], p[2], p[3], p[4], 'IsTrue')\n\n\ndef p_startvalue1(p):\n    '''startvalue : STRING'''\n    p[0] = StartValue1(p[1], 'StartValue1')\n\n\ndef p_startvalue2(p):\n    '''startvalue : ID'''\n    p[0] = StartValue2(p[1], 'StartValue2')\n\ndef p_end(p):\n    '''end : empty'''\n    p[0] = EndNode()\n\ndef p_empty(p):\n    '''empty :'''\n    pass\n\n\ndef p_error(p):\n    global err\n    global errorCounter\n    errorCounter = errorCounter + 2\n    if p:\n        if p.type != 'COMMENT' and p.lineno == 1:\n            err = \"Syntax error on line 1: Missing expected initial comment.\"\n        else:\n            err = \"Syntax error on line %d: %s does not match %s position.\" % (p.lineno, p.value, p.type)\n\n\ndef syntax_analysis(path):\n    global errorCounter\n    parser = yacc.yacc('LALR')\n    result = parser.parse(open(path).read())\n    if (errorCounter == 0):\n        errorCounter = -1\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SyntaxAnalyzer.py b/SyntaxAnalyzer.py
--- a/SyntaxAnalyzer.py	(revision f4151b8e3d49fa3fae84c0a68a8549c474704789)
+++ b/SyntaxAnalyzer.py	(date 1663917418379)
@@ -232,8 +232,8 @@
 
 
 def p_repeatInstructions(p):
-    '''repeat_instructions : instructions BREAK'''
-    p[0] = RepeatInstructions(p[1], p[2], 'RepeatInstructions')
+    '''repeat_instructions : instructions BREAK SEMICOLON commentary'''
+    p[0] = RepeatInstructions(p[2], p[3], p[4],p[1], 'RepeatInstructions')
 
 
 def p_untilbody(p):
Index: TagaPlate.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># IDE CODE TAGAPLATE\n\nimport tkinter as tk\nfrom tkinter.filedialog import askopenfilename, asksaveasfilename\nfrom tkinter import messagebox\nimport LexicalAnalyzer as lx\nimport SyntaxAnalyzer as sx\nimport ParseTree as prs\n\n# GLOBAL VARIABLES\ngpath = ''\nsaved = False\nerr_row = 1\npr_row = 1\n\nrunnable = False\ncompilation_errors = 0\nprint_txt = ''\n\n# MAIN WINDOW\nmain = tk.Tk()\nmain.title(\"TagaPlate IDE\")\n\n\n# _________________________________________ Line Number Class __________________________________________________________\n\nclass LineNumber(tk.Text):\n    def __init__(self, master, text_widget, **kwargs):\n        super().__init__(master, **kwargs)\n        self.text_widget = text_widget\n        self.text_widget.bind('<KeyRelease>', self.on_key_release)\n        self.insert(1.0, '1')\n        self.configure(state='disabled')\n\n    def on_key_release(self, event=None):\n        global saved, lineno\n        p, q = self.text_widget.index(\"@0,0\").split('.')\n        p = int(p)\n        final_index = str(self.text_widget.index(tk.END))\n        num_of_lines = final_index.split('.')[0]\n        lines = '\\n'.join(str(p + no) for no in range(int(num_of_lines) - 1))\n        width = len(str(num_of_lines))\n        self.configure(state='normal', width=width)\n        self.delete(1.0, tk.END)\n        self.insert(1.0, lines)\n        self.configure(state='disabled')\n        saved = False\n        update_title()\n\n\n# ____________________________________ File Functions ___________________________________________________________________\n\ndef new_file():\n    global gpath, saved\n    path = asksaveasfilename(filetypes=[('TagaPlate Files', '*.tgp')])\n    if path != '':\n        if not path.endswith(\".tgp\"):\n            path += \".tgp\"\n        else:\n            pass\n        file = open(path, 'w')\n        welcome = 'Welcome to new TagaPlate File!'\n        file.write(welcome)\n        textEditor.delete('1.0', tk.END)\n        textEditor.insert('1.0', welcome)\n        delete_errors()\n        delete_prints()\n        file.close()\n        gpath = path\n        lineText.on_key_release('<Enter>')\n        reset_file()\n    saved = True\n    update_title()\n\n\ndef open_file():\n    global gpath, saved\n    path = askopenfilename(filetypes=[('TagaPlate Files', '*.tgp')])\n    if path != '':\n        file = open(path, 'r')\n        code = file.read()\n        textEditor.delete('1.0', tk.END)\n        textEditor.insert('1.0', code)\n        delete_errors()\n        delete_prints()\n        gpath = path\n        file.close()\n        lineText.on_key_release('<Enter>')\n        highlight_keywords('<Enter>')\n        reset_file()\n    else:\n        print(\"No file selected\")\n    saved = True\n    update_title()\n\n\ndef save_as():\n    global gpath, saved\n    if gpath == '':\n        path = asksaveasfilename(filetypes=[('TagaPlate Files', '*.tgp')])\n    else:\n        path = gpath\n    if path != '':\n        if not path.endswith(\".tgp\"):\n            path += \".tgp\"\n        else:\n            pass\n        file = open(path, 'w')\n        code = textEditor.get('1.0', tk.END)\n        file.write(code)\n        file.close()\n        gpath = path\n        saved = True\n        update_title()\n        reset_file()\n    else:\n        saved = False\n        print(\"No file selected\")\n\n\ndef reset_file():\n    lx.err = ''\n    sx.err = ''\n    prs.err = ''\n    prs.global_vars.clear()\n    prs.local_vars.clear()\n    prs.init_procs.clear()\n    prs.called_procs.clear()\n\n\n# ________________________________________ Compile and Run Functions ____________________________________________________\n\n\ndef compile():\n    global gpath, saved, compilation_errors, runnable\n    if (gpath == '') or (gpath != '' and not saved):\n        compile_aux()\n    else:\n        compilation_errors = 0\n        runnable = False\n        prs.global_vars.clear()\n        prs.init_procs.clear()\n        lx.lexical_analisis(gpath)\n        lexical_error_check()\n        sx.syntax_analysis(gpath)\n        syntax_error_check()\n        semantic_error_check()\n        print('Errors during compilation: ' + str(compilation_errors))\n        if compilation_errors == 0:\n            runnable = True\n\n\ndef compile_aux():\n    if ask_to_save() == 'yes':\n        save_as()\n        compile()\n    else:\n        w_errors(\"Can't compile without saving file\")\n        show_errors()\n        tk.messagebox.showinfo('Uncompiled', \"Can't compile without saving file\", icon='warning')\n\n\ndef run():\n    global runnable, print_txt\n    compile()\n    runnable_tree = sx.sem_tree.son3.son3\n    print_txt = ''\n    delete_prints()\n    if runnable and runnable_tree:\n        counter = function_counter(runnable_tree)\n        return recursive_execution(runnable_tree, runnable_tree, counter, counter)\n\n\ndef function_counter(function):\n    counter = 0\n    while function.nexxt.name != 'Null':\n        counter += 1\n        function = function.nexxt\n    return counter\n\n\ndef recursive_execution(first, func, counter, instructions):\n    if instructions == 0:\n        execute(func)\n        write_printer()\n        return\n    if counter == 0:\n        execute(func)\n        write_printer()\n        return recursive_execution(first, first, instructions - 1, instructions - 1)\n    else:\n        counter -= 1\n        func = func.nexxt\n        return recursive_execution(first, func, counter, instructions)\n\n\ndef execute(function):\n    if function.name == 'Instructions2':\n        return values(function.son3, function.son5.son1)\n    elif function.name == 'Instructions3':\n        return alter(function.son3, function.son5.son1, function.son7.son1)\n    elif function.name == 'Instructions4':\n        return alter_b(function.son3)\n    elif function.name == 'Instructions5':\n        return move_right()\n    elif function.name == 'Instructions6':\n        return move_left()\n    elif function.name == 'Instructions7':\n        return hammer(function.son3.son1)\n    elif function.name == 'Instructions8':\n        return stop()\n    elif function.name == 'Instructions10':\n        return until_function(function.son1.son5, function.son1.son3)\n    elif function.name == 'Instructions12':\n        if function.son1.name == 'CaseBody1':\n            return case1(function.son1.son4, function.son1.son8, function.son1.son10)\n        elif function.son1.name == 'CaseBody3':\n            return case3(function.son1.son2, function.son1.son3.son2, function.son1.son3.son5)\n    elif function.name == 'Instructions13':\n        return printer(function.son3)\n    elif function.name == 'Instructions14':\n        return is_true(function.son1.son3)\n    elif function.name == 'Instructions11':\n        While(function.son1.son2, function.son1.son4)\n    else:\n        pass\n\n\ndef values(name, value):\n    for v in sx.global_vars:\n        if v[0] == name:\n            v[2] = value\n\n\ndef alter(name, op, value):\n    for v in sx.global_vars:\n        if v[0] == name:\n            if op == 'ADD':\n                v[2] = str(int(v[2]) + int(value))\n                return v\n            elif op == 'SUB':\n                v[2] = str(int(v[2]) - int(value))\n                return v\n            elif op == 'MUL':\n                v[2] = str(int(v[2]) * int(value))\n                return v\n            elif op == 'DIV':\n                v[2] = str(int(v[2]) / int(value))\n                return v\n\n\ndef alter_b(name):\n    for v in sx.global_vars:\n        if v[0] == name:\n            if v[2] == 'True':\n                v[2] = 'False'\n                return v\n            else:\n                v[2] = 'True'\n                return v\n\n\ndef move_right():\n    print('Parte de Marco')\n\n\ndef move_left():\n    print('Parte de Marco')\n\n\ndef hammer(pos):\n    if pos == 'N':\n        print('Marco norte')\n    elif pos == 'S':\n        print('Marco sur')\n    elif pos == 'E':\n        print('Marco este')\n    elif pos == 'O':\n        print('Marco oeste')\n\n\ndef stop():\n    print('Parte Marco')\n\n\ndef until_function(condition, instructions):\n    numbers = find_condition(condition)\n    count = function_counter(instructions)\n    if condition.son2.son1 == '==' and numbers[0] != numbers[1]:\n        while numbers[0] != numbers[1]:\n            recursive_execution(instructions, instructions, count, count)\n            numbers = find_condition(condition)\n    elif (condition.son2.son1 == '>' or condition.son2.son1 == '>=') and numbers[0] < numbers[1]:\n        while numbers[0] < numbers[1]:\n            recursive_execution(instructions, instructions, count, count)\n            numbers = find_condition(condition)\n    elif (condition.son2.son1 == '<' or condition.son2.son1 == '<=') and numbers[0] > numbers[1]:\n        while numbers[0] > numbers[1]:\n            recursive_execution(instructions, instructions, count, count)\n            numbers = find_condition(condition)\n    elif condition.son2.son1 == '<>' and numbers[0] == numbers[1]:\n        while numbers[0] == numbers[1]:\n            recursive_execution(instructions, instructions, count, count)\n            numbers = find_condition(condition)\n\n\ndef case1(condition, instructions, next_case):\n    count = function_counter(instructions)\n    if condition.name == 'Condition7':\n        if is_true(condition.son1.son3):\n            return recursive_execution(instructions, instructions, count, count)\n        elif next_case.name != 'NullNode':\n            if next_case.name == 'CaseBody1':\n                return case1(next_case.son4, next_case.son8, next_case.son10)\n            elif next_case.name == 'CaseBody2' and next_case.son1.name == 'CaseElse1' and next_case.son1.name != 'NullNode':\n                return recursive_execution(next_case.son1.son3, next_case.son1.son3, count, count)\n    elif condition.name != 'Condition7':\n        numbers = find_condition(condition)\n        if condition.son2.son1 == '>' and numbers[0] > numbers[1]:\n            return recursive_execution(instructions, instructions, count, count)\n        elif condition.son2.son1 == '<' and numbers[0] < numbers[1]:\n            return recursive_execution(instructions, instructions, count, count)\n        elif condition.son2.son1 == '>=' and numbers[0] >= numbers[1]:\n            return recursive_execution(instructions, instructions, count, count)\n        elif condition.son2.son1 == '<=' and numbers[0] <= numbers[1]:\n            return recursive_execution(instructions, instructions, count, count)\n        elif condition.son2.son1 == '==' and numbers[0] == numbers[1]:\n            return recursive_execution(instructions, instructions, count, count)\n        elif condition.son2.son1 == '<>' and numbers[0] != numbers[1]:\n            return recursive_execution(instructions, instructions, count, count)\n        elif next_case.name != 'NullNode':\n            if next_case.name == 'CaseBody1':\n                return case1(next_case.son4, next_case.son8, next_case.son10)\n            elif next_case.name == 'CaseBody2' and next_case.son1.name == 'CaseElse1' and next_case.son1.name != 'NullNode':\n                return recursive_execution(next_case.son1.son3, next_case.son1.son3, count, count)\n\n\ndef case3(name, value, instructions):\n    print('Hola')\n\n\ndef printer(args):\n    global print_txt\n    if args.son1[0] == \"\\\"\":\n        print_txt = args.son1\n    else:\n        for v in sx.global_vars:\n            if v[0] == args.son1:\n                print_txt = v[2]\n\n\ndef is_true(name):\n    for v in sx.global_vars:\n        if v[0] == name:\n            if v[2] == 'True':\n                return True\n            elif v[2] == 'False':\n                return False\n        else:\n            pass\n\n\ndef find_condition(condition):\n    num1 = 0\n    num2 = 0\n    try:\n        num1 = int(condition.son1)\n    except:\n        for x in sx.global_vars:\n            if x[0] == condition.son1:\n                num1 = int(x[2])\n    try:\n        num2 = int(condition.son3)\n    except:\n        for y in sx.global_vars:\n            if y[0] == condition.son3:\n                num2 = int(y[2])\n    return num1, num2\n\n\ndef While(condition, instructions):\n    count = function_counter(instructions)\n    if (condition.name == \"Condition7\"):\n        while is_true(condition.son1.son3):\n            recursive_execution(instructions, instructions, count, count)\n    else:\n        values = find_condition(condition)\n        if condition.son2.son1 == '>':\n            while values[0] > values[1]:\n                recursive_execution(instructions, instructions, count, count)\n                values = find_condition(condition)\n        if condition.son2.son1 == '<':\n            while values[0] < values[1]:\n                recursive_execution(instructions, instructions, count, count)\n                values = find_condition(condition)\n        if condition.son2.son1 == '>=':\n            while values[0] >= values[1]:\n                recursive_execution(instructions, instructions, count, count)\n                values = find_condition(condition)\n        if condition.son2.son1 == '<=':\n            while values[0] <= values[1]:\n                recursive_execution(instructions, instructions, count, count)\n                values = find_condition(condition)\n        if condition.son2.son1 == '==':\n            while values[0] == values[1]:\n                recursive_execution(instructions, instructions, count, count)\n                values = find_condition(condition)\n        if condition.son2.son1 == '<>':\n            while values[0] != values[1]:\n                recursive_execution(instructions, instructions, count, count)\n                values = find_condition(condition)\n\ndef ask_to_save():\n    return tk.messagebox.askquestion('Save first', 'Do you want to save your file?', icon='warning')\n\n\n# __________________________________________ IDE Modifier Functions _____________________________________________________\n\ndef set_dark():\n    textEditor.config(background='black', foreground='white')\n\n\ndef set_light():\n    textEditor.config(background='white', foreground='black')\n\n\ndef update_title():\n    global saved\n    if saved:\n        main.title('TagaPlate IDE')\n    else:\n        main.title('TagaPlate IDE (not saved)')\n\n\ndef highlight_keywords(event):\n    words = {'@Principal': 'orange',\n             'New': 'blue',\n             'True': 'blue',\n             'False': 'blue',\n             'While': 'blue',\n             'Until': 'blue',\n             'Case': 'blue',\n             'When': 'blue',\n             'Then': 'blue',\n             'Else': 'blue',\n             'Break': 'blue',\n             'Proc': 'blue',\n             'Values': 'red',\n             'Alter': 'red',\n             'AlterB': 'red',\n             'MoveRight': 'red',\n             'MoveLeft': 'red',\n             'Hammer': 'red',\n             'Stop': 'red',\n             'isTrue': 'red',\n             'Repeat': 'red',\n             'PrintValues': 'red',\n             'CALL': 'red'}\n    for k, c in words.items():\n        start_index = '1.0'\n        while True:\n            start_index = textEditor.search(k, start_index, tk.END)\n            if start_index:\n                end_index = textEditor.index('%s+%dc' % (start_index, (len(k))))\n                textEditor.tag_add(k, start_index, end_index)\n                textEditor.tag_config(k, foreground=c)\n                start_index = end_index\n            else:\n                break\n\n\n# _________________________________________ Error Management Functions _________________________________________________\n\ndef show_errors():\n    lx.err = ''\n    sx.err = ''\n    errorW.deiconify()\n\n\ndef exit_errors():\n    errorW.withdraw()\n\n\ndef w_errors(err_msg):\n    global err_row\n    t.config(state='normal')\n    t.insert(str(err_row) + '.0', err_msg + \"\\n\")\n    err_row += 1\n    t.pack()\n    t.config(state='disabled')\n\n\ndef lexical_error_check():\n    global compilation_errors\n    if lx.err != '':\n        compilation_errors += 1\n        w_errors(lx.err)\n        show_errors()\n    else:\n        pass\n\n\ndef syntax_error_check():\n    global compilation_errors\n    if sx.err != '':\n        compilation_errors += 1\n        w_errors(sx.err)\n        show_errors()\n    else:\n        pass\n\n\ndef semantic_error_check():\n    global compilation_errors\n    if prs.err != '':\n        compilation_errors += 1\n        w_errors(prs.err)\n        show_errors()\n    else:\n        pass\n\n\ndef delete_errors():\n    t.config(state='normal')\n    t.delete('1.0', tk.END)\n    t.config(state='disabled')\n\n\nerrorW = tk.Toplevel(main)\nerrorW.title(\"TagaPlate - Errors\")\nerrorW.geometry(\"500x300\")\nerrorW.protocol(\"WM_DELETE_WINDOW\", exit_errors)\nerrorW.withdraw()\nt = tk.Text(errorW)\nt.config(foreground='red', state='disabled')\n\n#_________________________________________ Print Management Functions ___________________________________________________\n\ndef show_prints():\n    printsW.deiconify()\n\n\ndef exit_prints():\n    printsW.withdraw()\n\n\ndef write_printer():\n    global print_txt\n    if print_txt != '':\n        set_print_text(print_txt)\n        show_prints()\n        print_txt = ''\n    else:\n        pass\n\n\ndef set_print_text(string):\n    global pr_row\n    t2.config(state='normal')\n    t2.insert(str(pr_row) + '.0', string + '\\n')\n    pr_row += 1\n    t2.pack()\n    t2.config(state='disabled')\n\n\ndef delete_prints():\n    t2.config(state='normal')\n    t2.delete('1.0', tk.END)\n    t2.config(state='disabled')\n\n\nprintsW = tk.Toplevel(main)\nprintsW.title(\"TagaPlate - Prints\")\nprintsW.geometry(\"500x300\")\nprintsW.protocol(\"WM_DELETE_WINDOW\", exit_prints)\nprintsW.withdraw()\nt2 = tk.Text(printsW)\nt2.config(foreground='green', state='disabled')\n\n\n# ________________________________________ IDE Editor ___________________________________________________________________\n\ntextEditor = tk.Text()\ntextEditor.config(background='white', foreground='black')\ntextEditor.pack(side=tk.RIGHT, expand=1)\ntextEditor.bind('<Key>', highlight_keywords)\n\nlineText = LineNumber(main, textEditor, width=1)\nlineText.pack(side=tk.LEFT)\n\n\n# ___________________________________________ IDE Menu Management _______________________________________________________\n\nmenuBar = tk.Menu(main)\n\nfileBar = tk.Menu(menuBar, tearoff=0)\nfileBar.add_command(label='New File', command=new_file)\nfileBar.add_command(label='Open File', command=open_file)\nfileBar.add_command(label='Save File As', command=save_as)\nmenuBar.add_cascade(label='File', menu=fileBar)\n\nrunBar = tk.Menu(menuBar, tearoff=0)\nrunBar.add_command(label='Compile', command=compile)\nrunBar.add_command(label='Compile and Run', command=run)\nmenuBar.add_cascade(label='Run', menu=runBar)\n\nthemeBar = tk.Menu(menuBar, tearoff=0)\nthemeBar.add_command(label='Dark', command=set_dark)\nthemeBar.add_command(label='Light', command=set_light)\n\nmenuBar.add_command(label='Errors', command=show_errors)\nmenuBar.add_command(label='Prints', command=show_prints)\n\nmenuBar.add_cascade(label='Theme', menu=themeBar)\n# _______________________________________________________________________________________________________________________\n\nmain.config(menu=menuBar)\nmain.mainloop()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TagaPlate.py b/TagaPlate.py
--- a/TagaPlate.py	(revision f4151b8e3d49fa3fae84c0a68a8549c474704789)
+++ b/TagaPlate.py	(date 1663917489426)
@@ -209,8 +209,12 @@
         return hammer(function.son3.son1)
     elif function.name == 'Instructions8':
         return stop()
+    elif function.name == 'Instructions9':
+        return repeat(function.son3)
     elif function.name == 'Instructions10':
         return until_function(function.son1.son5, function.son1.son3)
+    elif function.name == 'Instructions11':
+        return whiles(function.son1.son2, function.son1.son4)
     elif function.name == 'Instructions12':
         if function.son1.name == 'CaseBody1':
             return case1(function.son1.son4, function.son1.son8, function.son1.son10)
@@ -220,8 +224,6 @@
         return printer(function.son3)
     elif function.name == 'Instructions14':
         return is_true(function.son1.son3)
-    elif function.name == 'Instructions11':
-        While(function.son1.son2, function.son1.son4)
     else:
         pass
 
@@ -378,7 +380,7 @@
     return num1, num2
 
 
-def While(condition, instructions):
+def whiles(condition, instructions):
     count = function_counter(instructions)
     if (condition.name == "Condition7"):
         while is_true(condition.son1.son3):
@@ -410,6 +412,11 @@
                 recursive_execution(instructions, instructions, count, count)
                 values = find_condition(condition)
 
+
+def repeat(instructions):
+    count = function_counter(instructions)
+    recursive_execution(instructions, instructions, count, count)
+
 def ask_to_save():
     return tk.messagebox.askquestion('Save first', 'Do you want to save your file?', icon='warning')
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"ba0523e4-c17a-499c-8c9d-9960f72ac75a\" name=\"Changes\" comment=\"Else arreglado\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Pruebas/Variables.tgp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Pruebas/Variables.tgp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/TagaPlate.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/TagaPlate.py\" afterDir=\"false\" />\n    </list>\n    <list id=\"a7a8f410-996f-4d70-98a8-bc5f5cae8358\" name=\"Changes by kendall\" comment=\"Changes by kendall\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2DYNp5yAo8r1mYvA5FRstFNRJVj\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Usuario/Documents/GitHub/Proyecto-TagaPlate/ply-3.11&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\ply-3.11\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\TagaPlate Compiler\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Python.TagaPlate (1)\">\n    <configuration name=\"LexicalAnalyzer\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\LexicalAnalyzer.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"RunOperations\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/RunOperations.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"SyntaxAnalyzer\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\SyntaxAnalyzer.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TagaPlate IDE\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/TagaPlate IDE.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TagaPlate (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/bin/python3.9\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/TagaPlate.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"TagaPlate\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\TagaPlate.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"semanticAnalyzer\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"Proyecto-TagaPlate\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Usuario\\Documents\\GitHub\\Proyecto-TagaPlate\\venv\\Scripts\\python.exe\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/semanticAnalyzer.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.SyntaxAnalyzer\" />\n        <item itemvalue=\"Python.LexicalAnalyzer\" />\n        <item itemvalue=\"Python.TagaPlate IDE\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"ba0523e4-c17a-499c-8c9d-9960f72ac75a\" name=\"Changes\" comment=\"\" />\n      <created>1660872241387</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1660872241387</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Create tokens\">\n      <created>1660874868234</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1660874868234</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Analizador léxico finalizado\">\n      <created>1661321864220</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661321864220</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Analizador léxico finalizado v2\">\n      <created>1661406783620</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661406783620</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"sintactico empezado\">\n      <created>1661408481919</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661408481919</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Sintactico terminado v2\">\n      <created>1661836420490</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1661836420490</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"semanticAnalyzer.py sin terminar\">\n      <created>1662182790055</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662182790055</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"tagaplate.py mejorado\">\n      <created>1662423121919</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662423121919</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"tagaplate.py comentado\">\n      <created>1662423927583</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662423927583</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"tagaplate.py mejorado v2\">\n      <created>1662431941122</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662431941122</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"tagaplate.py mejorado v3\">\n      <created>1662433964845</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662433964845</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"tagaplate.py mejorado v4\">\n      <created>1662434368332</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662434368332</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"cambios varios\">\n      <created>1662437912956</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662437912956</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Se sigue avanzando el desarrollo del Analizador Semantico\">\n      <created>1662520562534</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662520562534</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Se continuo el desarrollo del analizador semantico\">\n      <created>1662607177796</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662607177796</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"fix sintax analysis for print function\">\n      <created>1662785954621</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662785954621</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Add classes to parse tree\">\n      <created>1662877853729</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1662877853730</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Build parse tree\">\n      <created>1663048564191</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663048564191</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"Parse tree finished\">\n      <created>1663126414270</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663126414270</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"Changes by kendall\">\n      <created>1663126430226</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663126430226</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"semanticas de linea\">\n      <created>1663469560479</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663469560479</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"Analisis semantico terminado\">\n      <created>1663643523132</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663643523132</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"Errores de declaracion de variables\">\n      <created>1663654766921</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663654766921</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"Semantica terminada\">\n      <created>1663699374362</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663699374362</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"Semantica terminada\">\n      <created>1663725361885</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663725361885</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"update\">\n      <created>1663822810366</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663822810366</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"run operations\">\n      <created>1663826115905</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663826115905</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"Changes by kendall\">\n      <created>1663826135832</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663826135832</updated>\n    </task>\n    <task id=\"LOCAL-00028\" summary=\"funciones auxiliares\">\n      <created>1663906780468</created>\n      <option name=\"number\" value=\"00028\" />\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663906780469</updated>\n    </task>\n    <task id=\"LOCAL-00029\" summary=\"todo en TagaPlate.py\">\n      <created>1663910033367</created>\n      <option name=\"number\" value=\"00029\" />\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663910033367</updated>\n    </task>\n    <task id=\"LOCAL-00030\" summary=\"Else listo\">\n      <created>1663912896855</created>\n      <option name=\"number\" value=\"00030\" />\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663912896855</updated>\n    </task>\n    <task id=\"LOCAL-00031\" summary=\"Else arreglado\">\n      <created>1663913648319</created>\n      <option name=\"number\" value=\"00031\" />\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663913648319</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"32\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Sintactico terminado v2\" />\n    <MESSAGE value=\"semanticAnalyzer.py sin terminar\" />\n    <MESSAGE value=\"tagaplate.py mejorado\" />\n    <MESSAGE value=\"tagaplate.py comentado\" />\n    <MESSAGE value=\"tagaplate.py mejorado v2\" />\n    <MESSAGE value=\"tagaplate.py mejorado v3\" />\n    <MESSAGE value=\"tagaplate.py mejorado v4\" />\n    <MESSAGE value=\"cambios varios\" />\n    <MESSAGE value=\"Se sigue avanzando el desarrollo del Analizador Semantico\" />\n    <MESSAGE value=\"Se continuo el desarrollo del analizador semantico\" />\n    <MESSAGE value=\"fix sintax analysis for print function\" />\n    <MESSAGE value=\"Add classes to parse tree\" />\n    <MESSAGE value=\"Build parse tree\" />\n    <MESSAGE value=\"Parse tree finished\" />\n    <MESSAGE value=\"semanticas de linea\" />\n    <MESSAGE value=\"Analisis semantico terminado\" />\n    <MESSAGE value=\"Errores de declaracion de variables\" />\n    <MESSAGE value=\"Semantica terminada\" />\n    <MESSAGE value=\"update\" />\n    <MESSAGE value=\"run operations\" />\n    <MESSAGE value=\"Changes by kendall\" />\n    <MESSAGE value=\"funciones auxiliares\" />\n    <MESSAGE value=\"todo en TagaPlate.py\" />\n    <MESSAGE value=\"Else listo\" />\n    <MESSAGE value=\"Else arreglado\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Else arreglado\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f4151b8e3d49fa3fae84c0a68a8549c474704789)
+++ b/.idea/workspace.xml	(date 1663917490238)
@@ -4,10 +4,14 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ba0523e4-c17a-499c-8c9d-9960f72ac75a" name="Changes" comment="Else arreglado">
+    <list default="true" id="ba0523e4-c17a-499c-8c9d-9960f72ac75a" name="Changes" comment="While condition finished">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Pruebas/Variables.tgp" beforeDir="false" afterPath="$PROJECT_DIR$/Pruebas/Variables.tgp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ParseTree.py" beforeDir="false" afterPath="$PROJECT_DIR$/ParseTree.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Pruebas/Prueba2.tgp" beforeDir="false" afterPath="$PROJECT_DIR$/Pruebas/Prueba2.tgp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/SyntaxAnalyzer.py" beforeDir="false" afterPath="$PROJECT_DIR$/SyntaxAnalyzer.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/TagaPlate.py" beforeDir="false" afterPath="$PROJECT_DIR$/TagaPlate.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/parser.out" beforeDir="false" afterPath="$PROJECT_DIR$/parser.out" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/parsetab.py" beforeDir="false" afterPath="$PROJECT_DIR$/parsetab.py" afterDir="false" />
     </list>
     <list id="a7a8f410-996f-4d70-98a8-bc5f5cae8358" name="Changes by kendall" comment="Changes by kendall" />
     <option name="SHOW_DIALOG" value="false" />
@@ -438,7 +442,21 @@
       <option name="project" value="LOCAL" />
       <updated>1663913648319</updated>
     </task>
-    <option name="localTasksCounter" value="32" />
+    <task id="LOCAL-00032" summary="While condition finished">
+      <created>1663915525860</created>
+      <option name="number" value="00032" />
+      <option name="presentableId" value="LOCAL-00032" />
+      <option name="project" value="LOCAL" />
+      <updated>1663915525860</updated>
+    </task>
+    <task id="LOCAL-00033" summary="While condition finished">
+      <created>1663915536687</created>
+      <option name="number" value="00033" />
+      <option name="presentableId" value="LOCAL-00033" />
+      <option name="project" value="LOCAL" />
+      <updated>1663915536687</updated>
+    </task>
+    <option name="localTasksCounter" value="34" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -453,7 +471,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="Sintactico terminado v2" />
     <MESSAGE value="semanticAnalyzer.py sin terminar" />
     <MESSAGE value="tagaplate.py mejorado" />
     <MESSAGE value="tagaplate.py comentado" />
@@ -478,6 +495,7 @@
     <MESSAGE value="todo en TagaPlate.py" />
     <MESSAGE value="Else listo" />
     <MESSAGE value="Else arreglado" />
-    <option name="LAST_COMMIT_MESSAGE" value="Else arreglado" />
+    <MESSAGE value="While condition finished" />
+    <option name="LAST_COMMIT_MESSAGE" value="While condition finished" />
   </component>
 </project>
\ No newline at end of file
Index: ParseTree.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\n\ntree_text = '\\n'\n\ninit_procs = []\ncalled_procs = []\n\nglobal_vars = []\nlocal_vars = []\nerr = ''\n\n\ndef check_variable(var_name):\n    # Check if variable exists\n    global err, global_vars, local_vars\n    flag = False\n    current = []\n    for var in global_vars:\n        if var_name == var[0]:\n            flag = True\n            current.append(var[0])\n            current.append(var[1])\n            current.append(var[2])\n            break\n    for var in local_vars:\n        if var_name == var[0]:\n            flag = True\n            current.append(var[0])\n            current.append(var[1])\n            current.append(var[2])\n            break\n    if not flag:\n        err = 'Semantic error: Variable ' + var_name + ' not defined.'\n    return current\n\n\ndef check_procedure(proc_name):\n    global err, init_procs\n    flag = False\n    current = ''\n    for proc in init_procs:\n        if proc_name == proc:\n            flag = True\n            current = proc_name\n            break\n    if not flag:\n        err = 'Semantic error: ' + proc_name + ' is not a defined procedure.'\n    return current\n\n\nclass Node:\n    pass\n\n\nclass NullNode(Node):\n    def __init__(self):\n        self.name = 'Null'\n\n    def printtxt(self, ident1, ident2):\n        return self.name + ']'\n\n\nclass Program(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.name = name\n\n    def printtxt(self, ident1):\n        global tree_text\n        tree_text += '[' + self.name + '\\n' + ident1\n\n        tree_text += '[' + self.son1 + ']' + '\\n' + ident1\n        tree_text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        tree_text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        tree_text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        tree_text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        tree_text += ']'\n\n        print(tree_text)\n\n\nclass Principal(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.name = name\n\n        global global_vars, local_vars\n        global_vars += local_vars\n        local_vars.clear()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Procedures(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.name = name\n\n        global local_vars, init_procs\n        local_vars.clear()\n        init_procs.append(self.son2)\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions1(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, nexxt, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.son9 = son9\n        self.nexxt = nexxt\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son7 + ']' + '\\n' + ident1\n        text += '[' + self.son8 + ']' + '\\n' + ident1\n        text += '[' + self.son9.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err, proc_type, global_vars, local_vars\n\n        # Valor asignado\n        if self.son4.son1 == 'Num' and (self.son6.son1 == 'True' or self.son6.son1 == 'False'):\n            err = 'Semantic error: Boolean value cannot be assigned to numeric variable'\n        elif self.son4.son1 == 'Bool' and re.search('\\d+', self.son6.son1):\n            err = 'Semantic error: Number value cannot be assigned to boolean variable'\n\n        # Variable con igual nombre\n        flag = False\n        for g in global_vars:\n            if self.son2 == g[0]:\n                err = 'Semantic error: Variable ' + self.son2 + ' defined multiple times.'\n                flag = True\n                break\n        for l in local_vars:\n            if self.son2 == l[0]:\n                err = 'Semantic error: Variable ' + self.son2 + ' defined multiple times.'\n                flag = True\n                break\n        if not flag:\n            local_vars.append([self.son2, self.son4.son1, self.son6.son1])\n\n\nclass Instructions2(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, nexxt, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.nexxt = nexxt\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7 + ']' + '\\n' + ident1\n        text += '[' + self.son8.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        current = check_variable(self.son3)\n        # Check if variable type matches with value\n        if current:\n            if current[1] == 'Bool' and re.search('\\d+', self.son5.son1):\n                err = 'Semantic error: Number value cannot be assigned to boolean variable'\n            elif current[1] == 'Num' and (self.son5.son1 == 'True' or self.son5.son1 == 'False'):\n                err = 'Semantic error: Boolean value cannot be assigned to numeric variable'\n\n\nclass Instructions3(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, son10, nexxt, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.son9 = son9\n        self.son10 = son10\n        self.nexxt = nexxt\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son8 + ']' + '\\n' + ident1\n        text += '[' + self.son9 + ']' + '\\n' + ident1\n        text += '[' + self.son10.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        current = check_variable(self.son3)\n        if current:\n            if current[1] == 'Bool':\n                err = 'Semantic error: Cannot operate boolean type variable.'\n            elif self.son7.son1 == 'True' or self.son7.son1 == 'False':\n                err = 'Semantic error: Cannot operate boolean value.'\n            elif self.son5.son1 == 'DIV' and self.son7.son1 == '0':\n                err = 'Semantic error: Cannot divide by zero.'\n\n\nclass Instructions4(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, nexxt, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.nexxt = nexxt\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        current = check_variable(self.son3)\n        if current:\n            if current[1] == 'Num':\n                err = 'Semantic error: AlterB cannot operate numeric variable.'\n\n\nclass Instructions5(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.nexxt = son4\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions6(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.nexxt = son4\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions7(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.nexxt = son7\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions8(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.nexxt = son4\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions9(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.nexxt = son7\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions10(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.nexxt = son4\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions11(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.nexxt = son4\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions12(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.nexxt = son4\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions13(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.nexxt = son7\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions14(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.nexxt = son4\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Instructions15(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.nexxt = son7\n        self.name = name\n        global called_procs\n        called_procs.append(self.son3)\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Commentary1(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass DataType1(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass DataType2(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value1(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value2(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value3(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Value4(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, name):\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.name = name\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son8 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        current = check_variable(self.son3)\n        if current:\n            if current[1] == 'Bool':\n                err = 'Semantic error: Cannot operate boolean type variable.'\n            elif self.son7.son1 == 'True' or self.son7.son1 == 'False':\n                err = 'Semantic error: Cannot operate boolean value.'\n\n\nclass Operator1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Operator2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Operator3(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Operator4(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator3(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator4(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator5(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Comparator6(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position3(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Position4(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass RepeatInstructions(Node):\n    def __init__(self, son1, son2, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass UntilBody(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass WhileBody(Node):\n    def __init__(self, son1, son2, son3, son4, son5, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass CaseBody1(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, son10, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n        self.son8 = son8\n        self.son9 = son9\n        self.son10 = son10\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son5 + ']' + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7 + ']' + '\\n' + ident1\n        text += '[' + self.son8.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son9 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass CaseBody2(Node):\n    def __init__(self, son1, name):\n        self.son1 = son1\n        self.name = name\n\n\nclass CaseElse1(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass CaseBody3(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass InnerCaseBody1(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass InnerCaseBody2(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass InnerCaseBody3(Node):\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.son5 = son5\n        self.son6 = son6\n        self.son7 = son7\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n' + ident1\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son6 + ']' + '\\n' + ident1\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass Condition1(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        current1 = check_variable(self.son1)\n        current2 = check_variable(self.son3)\n        if current1 and current2:\n            if current1[1] == 'Bool':\n                err = 'Semantic error: Cannot compare boolean variable ' + current1[0] + '.'\n            if current2[1] == 'Bool':\n                err = 'Semantic error: Cannot compare boolean variable ' + current2[0] + '.'\n\n\nclass Condition2(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err, global_vars\n        current = check_variable(self.son1)\n        if current:\n            if current[1] == 'Bool':\n                err = 'Semantic error: Cannot compare boolean variable ' + current[0] + '.'\n\n\nclass Condition3(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        current = check_variable(self.son3)\n        if current:\n            if current[1] == 'Bool':\n                err = 'Semantic error: Cannot compare boolean variable ' + current[0] + '.'\n\n\nclass Condition4(Node):\n    def __init__(self, son1, son2, son3, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        if int(self.son1) > int(self.son3) and (self.son2.son1 == '>' or self.son2.son1 == '>='):\n            err = 'Semantic error: Condition is always true.'\n        elif int(self.son1) < int(self.son3) and (self.son2.son1 == '>' or self.son2.son1 == '>='):\n            err = 'Semantic error: Condition is always false.'\n        elif int(self.son1) < int(self.son3) and (self.son2.son1 == '<' or self.son2.son1 == '<='):\n            err = 'Semantic error: Condition is always true.'\n        elif int(self.son1) > int(self.son3) and (self.son2.son1 == '<' or self.son2.son1 == '<='):\n            err = 'Semantic error: Condition is always false.'\n        elif int(self.son1) == int(self.son3) and (self.son2.son1 == '=='):\n            err = 'Semantic error: Condition is always true.'\n        elif int(self.son1) != int(self.son3) and (self.son2.son1 == '=='):\n            err = 'Semantic error: Condition is always false.'\n\n\nclass Condition5(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        err = 'Semantic error: Condition is always ' + self.son1\n\n\nclass Condition6(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        err = 'Semantic error: Condition is always ' + self.son1\n\n\nclass Condition7(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass IsTrue(Node):\n    def __init__(self, son1, son2, son3, son4, name):\n        self.name = name\n        self.son1 = son1\n        self.son2 = son2\n        self.son3 = son3\n        self.son4 = son4\n        self.semantics()\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n' + ident1\n        text += '[' + self.son2 + ']' + '\\n' + ident1\n        text += '[' + self.son3 + ']' + '\\n' + ident1\n        text += '[' + self.son4 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n    def semantics(self):\n        global err\n        current = check_variable(self.son3)\n        if current:\n            if current[1] == 'Num':\n                err = 'Semantic error: Variable in IsTrue cannot be numeric.'\n\n\nclass StartValue1(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass StartValue2(Node):\n    def __init__(self, son1, name):\n        self.name = name\n        self.son1 = son1\n\n    def printtxt(self, ident1, ident2):\n        text = self.name + '\\n' + ident1\n\n        text += '[' + self.son1 + ']' + '\\n'\n\n        text += ident2 + ']'\n        return text\n\n\nclass EndNode(Node):\n    def __init__(self):\n        self.semantics()\n\n    def semantics(self):\n        global called_procs\n        for p in called_procs:\n            check_procedure(p)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ParseTree.py b/ParseTree.py
--- a/ParseTree.py	(revision f4151b8e3d49fa3fae84c0a68a8549c474704789)
+++ b/ParseTree.py	(date 1663917418331)
@@ -883,16 +883,20 @@
 
 
 class RepeatInstructions(Node):
-    def __init__(self, son1, son2, name):
+    def __init__(self, son1, son2, son3, son4, name):
         self.name = name
         self.son1 = son1
         self.son2 = son2
+        self.son3 = son3
+        self.nexxt = son4
 
     def printtxt(self, ident1, ident2):
         text = self.name + '\n' + ident1
 
         text += '[' + self.son1.printtxt(ident1 + '\t', ident1) + '\n' + ident1
         text += '[' + self.son2 + ']' + '\n'
+        text += '[' + self.son3 + ']' + '\n'
+        text += '[' + self.nexxt.printtxt(ident1 + '\t', ident1) + '\n'
 
         text += ident2 + ']'
         return text
Index: Pruebas/Prueba2.tgp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- Prueba\n\n@Principal(\n New @var2(Num,5);\n New @var1(Num,3);\n New @bool1(Bool, True);\n While isTrue(@bool1)(\n  PrintValues(\"1\");\n  While @var2 > @var1 (\n   PrintValues(\"HOLA\");\n    Alter(@var1, ADD, 1);\n  );\n  PrintValues(\"2\");\n  PrintValues(\"3\");\n  AlterB(@bool1);\n );\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pruebas/Prueba2.tgp b/Pruebas/Prueba2.tgp
--- a/Pruebas/Prueba2.tgp	(revision f4151b8e3d49fa3fae84c0a68a8549c474704789)
+++ b/Pruebas/Prueba2.tgp	(date 1663917708854)
@@ -4,17 +4,14 @@
  New @var2(Num,5);
  New @var1(Num,3);
  New @bool1(Bool, True);
- While isTrue(@bool1)(
-  PrintValues("1");
-  While @var2 > @var1 (
-   PrintValues("HOLA");
-    Alter(@var1, ADD, 1);
-  );
-  PrintValues("2");
-  PrintValues("3");
-  AlterB(@bool1);
+ Repeat(
+  PrintValues("HOLA");
  );
 );
+
+
+
+
 
 
 
Index: parser.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Created by PLY version 3.11 (http://www.dabeaz.com/ply)\n\nGrammar\n\nRule 0     S' -> program\nRule 1     program -> COMMENT procedures principal procedures end\nRule 2     principal -> PRINCIPAL LPARENT instructions RPARENT SEMICOLON\nRule 3     principal -> empty\nRule 4     procedures -> PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures\nRule 5     procedures -> empty\nRule 6     instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\nRule 7     instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\nRule 8     instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\nRule 9     instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\nRule 10    instructions -> instructions MOVR SEMICOLON commentary\nRule 11    instructions -> instructions MOVL SEMICOLON commentary\nRule 12    instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\nRule 13    instructions -> instructions STOP SEMICOLON commentary\nRule 14    instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\nRule 15    instructions -> instructions untilbody SEMICOLON commentary\nRule 16    instructions -> instructions whilebody SEMICOLON commentary\nRule 17    instructions -> instructions casebody SEMICOLON commentary\nRule 18    instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\nRule 19    instructions -> instructions istrue SEMICOLON commentary\nRule 20    instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary\nRule 21    instructions -> empty\nRule 22    commentary -> COMMENT\nRule 23    commentary -> empty\nRule 24    datatype -> NUMVAL\nRule 25    datatype -> BOOLVAL\nRule 26    value -> NUMBER\nRule 27    value -> TRUE\nRule 28    value -> FALSE\nRule 29    value -> ALTER LPARENT ID COMMA operator COMMA value RPARENT\nRule 30    operator -> ADD\nRule 31    operator -> SUB\nRule 32    operator -> MUL\nRule 33    operator -> DIV\nRule 34    comparator -> GT\nRule 35    comparator -> LT\nRule 36    comparator -> GET\nRule 37    comparator -> LET\nRule 38    comparator -> EQ\nRule 39    comparator -> DT\nRule 40    position -> NORTH\nRule 41    position -> SOUTH\nRule 42    position -> EAST\nRule 43    position -> WEST\nRule 44    repeat_instructions -> instructions BREAK\nRule 45    untilbody -> UNTIL LPARENT instructions RPARENT condition\nRule 46    whilebody -> WHILE condition LPARENT instructions RPARENT\nRule 47    casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\nRule 48    casebody -> case_else\nRule 49    case_else -> ELSE LPARENT instructions RPARENT\nRule 50    case_else -> empty\nRule 51    casebody -> CASE ID innercasebody\nRule 52    innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody\nRule 53    innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT innercasebody\nRule 54    innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT innercasebody\nRule 55    innercasebody -> empty\nRule 56    condition -> ID comparator ID\nRule 57    condition -> ID comparator NUMBER\nRule 58    condition -> NUMBER comparator ID\nRule 59    condition -> NUMBER comparator NUMBER\nRule 60    condition -> TRUE\nRule 61    condition -> FALSE\nRule 62    condition -> istrue\nRule 63    istrue -> VERT LPARENT ID RPARENT\nRule 64    startvalue -> STRING\nRule 65    startvalue -> ID\nRule 66    end -> empty\nRule 67    empty -> <empty>\n\nTerminals, with rules where they appear\n\nADD                  : 30\nALTER                : 8 29\nALTERB               : 9\nBOOLVAL              : 25\nBREAK                : 44\nCALL                 : 20\nCASE                 : 47 51\nCOMMA                : 6 7 8 8 29 29\nCOMMENT              : 1 22\nDIV                  : 33\nDT                   : 39\nEAST                 : 42\nELSE                 : 49\nEQ                   : 38\nFALSE                : 28 54 61\nGET                  : 36\nGT                   : 34\nHAMMER               : 12\nID                   : 4 6 7 8 9 20 29 51 56 56 57 58 63 65\nLET                  : 37\nLPARENT              : 2 4 6 7 8 9 12 14 18 20 29 45 46 47 47 49 52 53 54 63\nLT                   : 35\nMOVL                 : 11\nMOVR                 : 10\nMUL                  : 32\nNEW                  : 6\nNORTH                : 40\nNUMBER               : 26 52 57 58 59 59\nNUMVAL               : 24\nPRINCIPAL            : 2\nPRINT                : 18\nPROCEDURE            : 4\nREPEAT               : 14\nRPARENT              : 2 4 6 7 8 9 12 14 18 20 29 45 46 47 47 49 52 53 54 63\nSEMICOLON            : 2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\nSOUTH                : 41\nSTOP                 : 13\nSTRING               : 64\nSUB                  : 31\nTHEN                 : 47 52 53 54\nTRUE                 : 27 53 60\nUNTIL                : 45\nVALUES               : 7\nVERT                 : 63\nWEST                 : 43\nWHEN                 : 47 52 53 54\nWHILE                : 46\nerror                : \n\nNonterminals, with rules where they appear\n\ncase_else            : 48\ncasebody             : 17 47\ncommentary           : 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\ncomparator           : 56 57 58 59\ncondition            : 45 46 47\ndatatype             : 6\nempty                : 3 5 21 23 50 55 66\nend                  : 1\ninnercasebody        : 51 52 53 54\ninstructions         : 2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 44 45 46 47 49 52 53 54\nistrue               : 19 62\noperator             : 8 29\nposition             : 12\nprincipal            : 1\nprocedures           : 1 1 4\nprogram              : 0\nrepeat_instructions  : 14\nstartvalue           : 18\nuntilbody            : 15\nvalue                : 6 7 8 29\nwhilebody            : 16\n\nParsing method: LALR\n\nstate 0\n\n    (0) S' -> . program\n    (1) program -> . COMMENT procedures principal procedures end\n\n    COMMENT         shift and go to state 2\n\n    program                        shift and go to state 1\n\nstate 1\n\n    (0) S' -> program .\n\n\n\nstate 2\n\n    (1) program -> COMMENT . procedures principal procedures end\n    (4) procedures -> . PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures\n    (5) procedures -> . empty\n    (67) empty -> .\n\n  ! shift/reduce conflict for PROCEDURE resolved as shift\n    PROCEDURE       shift and go to state 4\n    PRINCIPAL       reduce using rule 67 (empty -> .)\n    $end            reduce using rule 67 (empty -> .)\n\n  ! PROCEDURE       [ reduce using rule 67 (empty -> .) ]\n\n    procedures                     shift and go to state 3\n    empty                          shift and go to state 5\n\nstate 3\n\n    (1) program -> COMMENT procedures . principal procedures end\n    (2) principal -> . PRINCIPAL LPARENT instructions RPARENT SEMICOLON\n    (3) principal -> . empty\n    (67) empty -> .\n\n    PRINCIPAL       shift and go to state 7\n    PROCEDURE       reduce using rule 67 (empty -> .)\n    $end            reduce using rule 67 (empty -> .)\n\n    principal                      shift and go to state 6\n    empty                          shift and go to state 8\n\nstate 4\n\n    (4) procedures -> PROCEDURE . ID LPARENT instructions RPARENT SEMICOLON procedures\n\n    ID              shift and go to state 9\n\n\nstate 5\n\n    (5) procedures -> empty .\n\n    PRINCIPAL       reduce using rule 5 (procedures -> empty .)\n    PROCEDURE       reduce using rule 5 (procedures -> empty .)\n    $end            reduce using rule 5 (procedures -> empty .)\n\n\nstate 6\n\n    (1) program -> COMMENT procedures principal . procedures end\n    (4) procedures -> . PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures\n    (5) procedures -> . empty\n    (67) empty -> .\n\n    PROCEDURE       shift and go to state 4\n    $end            reduce using rule 67 (empty -> .)\n\n    procedures                     shift and go to state 10\n    empty                          shift and go to state 5\n\nstate 7\n\n    (2) principal -> PRINCIPAL . LPARENT instructions RPARENT SEMICOLON\n\n    LPARENT         shift and go to state 11\n\n\nstate 8\n\n    (3) principal -> empty .\n\n    PROCEDURE       reduce using rule 3 (principal -> empty .)\n    $end            reduce using rule 3 (principal -> empty .)\n\n\nstate 9\n\n    (4) procedures -> PROCEDURE ID . LPARENT instructions RPARENT SEMICOLON procedures\n\n    LPARENT         shift and go to state 12\n\n\nstate 10\n\n    (1) program -> COMMENT procedures principal procedures . end\n    (66) end -> . empty\n    (67) empty -> .\n\n    $end            reduce using rule 67 (empty -> .)\n\n    end                            shift and go to state 13\n    empty                          shift and go to state 14\n\nstate 11\n\n    (2) principal -> PRINCIPAL LPARENT . instructions RPARENT SEMICOLON\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 15\n    empty                          shift and go to state 16\n\nstate 12\n\n    (4) procedures -> PROCEDURE ID LPARENT . instructions RPARENT SEMICOLON procedures\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 17\n    empty                          shift and go to state 16\n\nstate 13\n\n    (1) program -> COMMENT procedures principal procedures end .\n\n    $end            reduce using rule 1 (program -> COMMENT procedures principal procedures end .)\n\n\nstate 14\n\n    (66) end -> empty .\n\n    $end            reduce using rule 66 (end -> empty .)\n\n\nstate 15\n\n    (2) principal -> PRINCIPAL LPARENT instructions . RPARENT SEMICOLON\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 18\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 16\n\n    (21) instructions -> empty .\n\n    RPARENT         reduce using rule 21 (instructions -> empty .)\n    NEW             reduce using rule 21 (instructions -> empty .)\n    VALUES          reduce using rule 21 (instructions -> empty .)\n    ALTER           reduce using rule 21 (instructions -> empty .)\n    ALTERB          reduce using rule 21 (instructions -> empty .)\n    MOVR            reduce using rule 21 (instructions -> empty .)\n    MOVL            reduce using rule 21 (instructions -> empty .)\n    HAMMER          reduce using rule 21 (instructions -> empty .)\n    STOP            reduce using rule 21 (instructions -> empty .)\n    REPEAT          reduce using rule 21 (instructions -> empty .)\n    PRINT           reduce using rule 21 (instructions -> empty .)\n    CALL            reduce using rule 21 (instructions -> empty .)\n    UNTIL           reduce using rule 21 (instructions -> empty .)\n    WHILE           reduce using rule 21 (instructions -> empty .)\n    CASE            reduce using rule 21 (instructions -> empty .)\n    VERT            reduce using rule 21 (instructions -> empty .)\n    ELSE            reduce using rule 21 (instructions -> empty .)\n    SEMICOLON       reduce using rule 21 (instructions -> empty .)\n    BREAK           reduce using rule 21 (instructions -> empty .)\n\n\nstate 17\n\n    (4) procedures -> PROCEDURE ID LPARENT instructions . RPARENT SEMICOLON procedures\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 41\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 18\n\n    (2) principal -> PRINCIPAL LPARENT instructions RPARENT . SEMICOLON\n\n    SEMICOLON       shift and go to state 42\n\n\nstate 19\n\n    (6) instructions -> instructions NEW . ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n\n    ID              shift and go to state 43\n\n\nstate 20\n\n    (7) instructions -> instructions VALUES . LPARENT ID COMMA value RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 44\n\n\nstate 21\n\n    (8) instructions -> instructions ALTER . LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 45\n\n\nstate 22\n\n    (9) instructions -> instructions ALTERB . LPARENT ID RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 46\n\n\nstate 23\n\n    (10) instructions -> instructions MOVR . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 47\n\n\nstate 24\n\n    (11) instructions -> instructions MOVL . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 48\n\n\nstate 25\n\n    (12) instructions -> instructions HAMMER . LPARENT position RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 49\n\n\nstate 26\n\n    (13) instructions -> instructions STOP . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 50\n\n\nstate 27\n\n    (14) instructions -> instructions REPEAT . LPARENT repeat_instructions RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 51\n\n\nstate 28\n\n    (15) instructions -> instructions untilbody . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 52\n\n\nstate 29\n\n    (16) instructions -> instructions whilebody . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 53\n\n\nstate 30\n\n    (17) instructions -> instructions casebody . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 54\n\n\nstate 31\n\n    (18) instructions -> instructions PRINT . LPARENT startvalue RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 55\n\n\nstate 32\n\n    (19) instructions -> instructions istrue . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 56\n\n\nstate 33\n\n    (20) instructions -> instructions CALL . LPARENT ID RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 57\n\n\nstate 34\n\n    (45) untilbody -> UNTIL . LPARENT instructions RPARENT condition\n\n    LPARENT         shift and go to state 58\n\n\nstate 35\n\n    (46) whilebody -> WHILE . condition LPARENT instructions RPARENT\n    (56) condition -> . ID comparator ID\n    (57) condition -> . ID comparator NUMBER\n    (58) condition -> . NUMBER comparator ID\n    (59) condition -> . NUMBER comparator NUMBER\n    (60) condition -> . TRUE\n    (61) condition -> . FALSE\n    (62) condition -> . istrue\n    (63) istrue -> . VERT LPARENT ID RPARENT\n\n    ID              shift and go to state 60\n    NUMBER          shift and go to state 61\n    TRUE            shift and go to state 62\n    FALSE           shift and go to state 63\n    VERT            shift and go to state 38\n\n    condition                      shift and go to state 59\n    istrue                         shift and go to state 64\n\nstate 36\n\n    (47) casebody -> CASE . WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (51) casebody -> CASE . ID innercasebody\n\n    WHEN            shift and go to state 65\n    ID              shift and go to state 66\n\n\nstate 37\n\n    (48) casebody -> case_else .\n\n    SEMICOLON       reduce using rule 48 (casebody -> case_else .)\n\n\nstate 38\n\n    (63) istrue -> VERT . LPARENT ID RPARENT\n\n    LPARENT         shift and go to state 67\n\n\nstate 39\n\n    (49) case_else -> ELSE . LPARENT instructions RPARENT\n\n    LPARENT         shift and go to state 68\n\n\nstate 40\n\n    (50) case_else -> empty .\n\n    SEMICOLON       reduce using rule 50 (case_else -> empty .)\n\n\nstate 41\n\n    (4) procedures -> PROCEDURE ID LPARENT instructions RPARENT . SEMICOLON procedures\n\n    SEMICOLON       shift and go to state 69\n\n\nstate 42\n\n    (2) principal -> PRINCIPAL LPARENT instructions RPARENT SEMICOLON .\n\n    PROCEDURE       reduce using rule 2 (principal -> PRINCIPAL LPARENT instructions RPARENT SEMICOLON .)\n    $end            reduce using rule 2 (principal -> PRINCIPAL LPARENT instructions RPARENT SEMICOLON .)\n\n\nstate 43\n\n    (6) instructions -> instructions NEW ID . LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n\n    LPARENT         shift and go to state 70\n\n\nstate 44\n\n    (7) instructions -> instructions VALUES LPARENT . ID COMMA value RPARENT SEMICOLON commentary\n\n    ID              shift and go to state 71\n\n\nstate 45\n\n    (8) instructions -> instructions ALTER LPARENT . ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n\n    ID              shift and go to state 72\n\n\nstate 46\n\n    (9) instructions -> instructions ALTERB LPARENT . ID RPARENT SEMICOLON commentary\n\n    ID              shift and go to state 73\n\n\nstate 47\n\n    (10) instructions -> instructions MOVR SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 74\n    empty                          shift and go to state 76\n\nstate 48\n\n    (11) instructions -> instructions MOVL SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 77\n    empty                          shift and go to state 76\n\nstate 49\n\n    (12) instructions -> instructions HAMMER LPARENT . position RPARENT SEMICOLON commentary\n    (40) position -> . NORTH\n    (41) position -> . SOUTH\n    (42) position -> . EAST\n    (43) position -> . WEST\n\n    NORTH           shift and go to state 79\n    SOUTH           shift and go to state 80\n    EAST            shift and go to state 81\n    WEST            shift and go to state 82\n\n    position                       shift and go to state 78\n\nstate 50\n\n    (13) instructions -> instructions STOP SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 83\n    empty                          shift and go to state 76\n\nstate 51\n\n    (14) instructions -> instructions REPEAT LPARENT . repeat_instructions RPARENT SEMICOLON commentary\n    (44) repeat_instructions -> . instructions BREAK\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    BREAK           reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 84\n    repeat_instructions            shift and go to state 85\n    empty                          shift and go to state 16\n\nstate 52\n\n    (15) instructions -> instructions untilbody SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 86\n    empty                          shift and go to state 76\n\nstate 53\n\n    (16) instructions -> instructions whilebody SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 87\n    empty                          shift and go to state 76\n\nstate 54\n\n    (17) instructions -> instructions casebody SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 88\n    empty                          shift and go to state 76\n\nstate 55\n\n    (18) instructions -> instructions PRINT LPARENT . startvalue RPARENT SEMICOLON commentary\n    (64) startvalue -> . STRING\n    (65) startvalue -> . ID\n\n    STRING          shift and go to state 90\n    ID              shift and go to state 91\n\n    startvalue                     shift and go to state 89\n\nstate 56\n\n    (19) instructions -> instructions istrue SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 92\n    empty                          shift and go to state 76\n\nstate 57\n\n    (20) instructions -> instructions CALL LPARENT . ID RPARENT SEMICOLON commentary\n\n    ID              shift and go to state 93\n\n\nstate 58\n\n    (45) untilbody -> UNTIL LPARENT . instructions RPARENT condition\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 94\n    empty                          shift and go to state 16\n\nstate 59\n\n    (46) whilebody -> WHILE condition . LPARENT instructions RPARENT\n\n    LPARENT         shift and go to state 95\n\n\nstate 60\n\n    (56) condition -> ID . comparator ID\n    (57) condition -> ID . comparator NUMBER\n    (34) comparator -> . GT\n    (35) comparator -> . LT\n    (36) comparator -> . GET\n    (37) comparator -> . LET\n    (38) comparator -> . EQ\n    (39) comparator -> . DT\n\n    GT              shift and go to state 97\n    LT              shift and go to state 98\n    GET             shift and go to state 99\n    LET             shift and go to state 100\n    EQ              shift and go to state 101\n    DT              shift and go to state 102\n\n    comparator                     shift and go to state 96\n\nstate 61\n\n    (58) condition -> NUMBER . comparator ID\n    (59) condition -> NUMBER . comparator NUMBER\n    (34) comparator -> . GT\n    (35) comparator -> . LT\n    (36) comparator -> . GET\n    (37) comparator -> . LET\n    (38) comparator -> . EQ\n    (39) comparator -> . DT\n\n    GT              shift and go to state 97\n    LT              shift and go to state 98\n    GET             shift and go to state 99\n    LET             shift and go to state 100\n    EQ              shift and go to state 101\n    DT              shift and go to state 102\n\n    comparator                     shift and go to state 103\n\nstate 62\n\n    (60) condition -> TRUE .\n\n    LPARENT         reduce using rule 60 (condition -> TRUE .)\n    RPARENT         reduce using rule 60 (condition -> TRUE .)\n    SEMICOLON       reduce using rule 60 (condition -> TRUE .)\n\n\nstate 63\n\n    (61) condition -> FALSE .\n\n    LPARENT         reduce using rule 61 (condition -> FALSE .)\n    RPARENT         reduce using rule 61 (condition -> FALSE .)\n    SEMICOLON       reduce using rule 61 (condition -> FALSE .)\n\n\nstate 64\n\n    (62) condition -> istrue .\n\n    LPARENT         reduce using rule 62 (condition -> istrue .)\n    RPARENT         reduce using rule 62 (condition -> istrue .)\n    SEMICOLON       reduce using rule 62 (condition -> istrue .)\n\n\nstate 65\n\n    (47) casebody -> CASE WHEN . LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n\n    LPARENT         shift and go to state 104\n\n\nstate 66\n\n    (51) casebody -> CASE ID . innercasebody\n    (52) innercasebody -> . WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody\n    (53) innercasebody -> . WHEN TRUE THEN LPARENT instructions RPARENT innercasebody\n    (54) innercasebody -> . WHEN FALSE THEN LPARENT instructions RPARENT innercasebody\n    (55) innercasebody -> . empty\n    (67) empty -> .\n\n    WHEN            shift and go to state 106\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    innercasebody                  shift and go to state 105\n    empty                          shift and go to state 107\n\nstate 67\n\n    (63) istrue -> VERT LPARENT . ID RPARENT\n\n    ID              shift and go to state 108\n\n\nstate 68\n\n    (49) case_else -> ELSE LPARENT . instructions RPARENT\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 109\n    empty                          shift and go to state 16\n\nstate 69\n\n    (4) procedures -> PROCEDURE ID LPARENT instructions RPARENT SEMICOLON . procedures\n    (4) procedures -> . PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures\n    (5) procedures -> . empty\n    (67) empty -> .\n\n  ! shift/reduce conflict for PROCEDURE resolved as shift\n    PROCEDURE       shift and go to state 4\n    PRINCIPAL       reduce using rule 67 (empty -> .)\n    $end            reduce using rule 67 (empty -> .)\n\n  ! PROCEDURE       [ reduce using rule 67 (empty -> .) ]\n\n    procedures                     shift and go to state 110\n    empty                          shift and go to state 5\n\nstate 70\n\n    (6) instructions -> instructions NEW ID LPARENT . datatype COMMA value RPARENT SEMICOLON commentary\n    (24) datatype -> . NUMVAL\n    (25) datatype -> . BOOLVAL\n\n    NUMVAL          shift and go to state 112\n    BOOLVAL         shift and go to state 113\n\n    datatype                       shift and go to state 111\n\nstate 71\n\n    (7) instructions -> instructions VALUES LPARENT ID . COMMA value RPARENT SEMICOLON commentary\n\n    COMMA           shift and go to state 114\n\n\nstate 72\n\n    (8) instructions -> instructions ALTER LPARENT ID . COMMA operator COMMA value RPARENT SEMICOLON commentary\n\n    COMMA           shift and go to state 115\n\n\nstate 73\n\n    (9) instructions -> instructions ALTERB LPARENT ID . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 116\n\n\nstate 74\n\n    (10) instructions -> instructions MOVR SEMICOLON commentary .\n\n    RPARENT         reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    NEW             reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    VALUES          reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    ALTER           reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    ALTERB          reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    MOVR            reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    MOVL            reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    HAMMER          reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    STOP            reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    REPEAT          reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    PRINT           reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    CALL            reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    UNTIL           reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    WHILE           reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    CASE            reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    VERT            reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    ELSE            reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n    BREAK           reduce using rule 10 (instructions -> instructions MOVR SEMICOLON commentary .)\n\n\nstate 75\n\n    (22) commentary -> COMMENT .\n\n    RPARENT         reduce using rule 22 (commentary -> COMMENT .)\n    NEW             reduce using rule 22 (commentary -> COMMENT .)\n    VALUES          reduce using rule 22 (commentary -> COMMENT .)\n    ALTER           reduce using rule 22 (commentary -> COMMENT .)\n    ALTERB          reduce using rule 22 (commentary -> COMMENT .)\n    MOVR            reduce using rule 22 (commentary -> COMMENT .)\n    MOVL            reduce using rule 22 (commentary -> COMMENT .)\n    HAMMER          reduce using rule 22 (commentary -> COMMENT .)\n    STOP            reduce using rule 22 (commentary -> COMMENT .)\n    REPEAT          reduce using rule 22 (commentary -> COMMENT .)\n    PRINT           reduce using rule 22 (commentary -> COMMENT .)\n    CALL            reduce using rule 22 (commentary -> COMMENT .)\n    UNTIL           reduce using rule 22 (commentary -> COMMENT .)\n    WHILE           reduce using rule 22 (commentary -> COMMENT .)\n    CASE            reduce using rule 22 (commentary -> COMMENT .)\n    VERT            reduce using rule 22 (commentary -> COMMENT .)\n    ELSE            reduce using rule 22 (commentary -> COMMENT .)\n    SEMICOLON       reduce using rule 22 (commentary -> COMMENT .)\n    BREAK           reduce using rule 22 (commentary -> COMMENT .)\n\n\nstate 76\n\n    (23) commentary -> empty .\n\n    RPARENT         reduce using rule 23 (commentary -> empty .)\n    NEW             reduce using rule 23 (commentary -> empty .)\n    VALUES          reduce using rule 23 (commentary -> empty .)\n    ALTER           reduce using rule 23 (commentary -> empty .)\n    ALTERB          reduce using rule 23 (commentary -> empty .)\n    MOVR            reduce using rule 23 (commentary -> empty .)\n    MOVL            reduce using rule 23 (commentary -> empty .)\n    HAMMER          reduce using rule 23 (commentary -> empty .)\n    STOP            reduce using rule 23 (commentary -> empty .)\n    REPEAT          reduce using rule 23 (commentary -> empty .)\n    PRINT           reduce using rule 23 (commentary -> empty .)\n    CALL            reduce using rule 23 (commentary -> empty .)\n    UNTIL           reduce using rule 23 (commentary -> empty .)\n    WHILE           reduce using rule 23 (commentary -> empty .)\n    CASE            reduce using rule 23 (commentary -> empty .)\n    VERT            reduce using rule 23 (commentary -> empty .)\n    ELSE            reduce using rule 23 (commentary -> empty .)\n    SEMICOLON       reduce using rule 23 (commentary -> empty .)\n    BREAK           reduce using rule 23 (commentary -> empty .)\n\n\nstate 77\n\n    (11) instructions -> instructions MOVL SEMICOLON commentary .\n\n    RPARENT         reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    NEW             reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    VALUES          reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    ALTER           reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    ALTERB          reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    MOVR            reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    MOVL            reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    HAMMER          reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    STOP            reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    REPEAT          reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    PRINT           reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    CALL            reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    UNTIL           reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    WHILE           reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    CASE            reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    VERT            reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    ELSE            reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n    BREAK           reduce using rule 11 (instructions -> instructions MOVL SEMICOLON commentary .)\n\n\nstate 78\n\n    (12) instructions -> instructions HAMMER LPARENT position . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 117\n\n\nstate 79\n\n    (40) position -> NORTH .\n\n    RPARENT         reduce using rule 40 (position -> NORTH .)\n\n\nstate 80\n\n    (41) position -> SOUTH .\n\n    RPARENT         reduce using rule 41 (position -> SOUTH .)\n\n\nstate 81\n\n    (42) position -> EAST .\n\n    RPARENT         reduce using rule 42 (position -> EAST .)\n\n\nstate 82\n\n    (43) position -> WEST .\n\n    RPARENT         reduce using rule 43 (position -> WEST .)\n\n\nstate 83\n\n    (13) instructions -> instructions STOP SEMICOLON commentary .\n\n    RPARENT         reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    NEW             reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    VALUES          reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    ALTER           reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    ALTERB          reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    MOVR            reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    MOVL            reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    HAMMER          reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    STOP            reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    REPEAT          reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    PRINT           reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    CALL            reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    UNTIL           reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    WHILE           reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    CASE            reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    VERT            reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    ELSE            reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n    BREAK           reduce using rule 13 (instructions -> instructions STOP SEMICOLON commentary .)\n\n\nstate 84\n\n    (44) repeat_instructions -> instructions . BREAK\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    BREAK           shift and go to state 118\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 85\n\n    (14) instructions -> instructions REPEAT LPARENT repeat_instructions . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 119\n\n\nstate 86\n\n    (15) instructions -> instructions untilbody SEMICOLON commentary .\n\n    RPARENT         reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    NEW             reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    VALUES          reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    ALTER           reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    ALTERB          reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    MOVR            reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    MOVL            reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    HAMMER          reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    STOP            reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    REPEAT          reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    PRINT           reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    CALL            reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    UNTIL           reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    WHILE           reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    CASE            reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    VERT            reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    ELSE            reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n    BREAK           reduce using rule 15 (instructions -> instructions untilbody SEMICOLON commentary .)\n\n\nstate 87\n\n    (16) instructions -> instructions whilebody SEMICOLON commentary .\n\n    RPARENT         reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    NEW             reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    VALUES          reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    ALTER           reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    ALTERB          reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    MOVR            reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    MOVL            reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    HAMMER          reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    STOP            reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    REPEAT          reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    PRINT           reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    CALL            reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    UNTIL           reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    WHILE           reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    CASE            reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    VERT            reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    ELSE            reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n    BREAK           reduce using rule 16 (instructions -> instructions whilebody SEMICOLON commentary .)\n\n\nstate 88\n\n    (17) instructions -> instructions casebody SEMICOLON commentary .\n\n    RPARENT         reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    NEW             reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    VALUES          reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    ALTER           reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    ALTERB          reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    MOVR            reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    MOVL            reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    HAMMER          reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    STOP            reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    REPEAT          reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    PRINT           reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    CALL            reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    UNTIL           reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    WHILE           reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    CASE            reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    VERT            reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    ELSE            reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n    BREAK           reduce using rule 17 (instructions -> instructions casebody SEMICOLON commentary .)\n\n\nstate 89\n\n    (18) instructions -> instructions PRINT LPARENT startvalue . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 120\n\n\nstate 90\n\n    (64) startvalue -> STRING .\n\n    RPARENT         reduce using rule 64 (startvalue -> STRING .)\n\n\nstate 91\n\n    (65) startvalue -> ID .\n\n    RPARENT         reduce using rule 65 (startvalue -> ID .)\n\n\nstate 92\n\n    (19) instructions -> instructions istrue SEMICOLON commentary .\n\n    RPARENT         reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    NEW             reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    VALUES          reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    ALTER           reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    ALTERB          reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    MOVR            reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    MOVL            reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    HAMMER          reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    STOP            reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    REPEAT          reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    PRINT           reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    CALL            reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    UNTIL           reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    WHILE           reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    CASE            reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    VERT            reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    ELSE            reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n    BREAK           reduce using rule 19 (instructions -> instructions istrue SEMICOLON commentary .)\n\n\nstate 93\n\n    (20) instructions -> instructions CALL LPARENT ID . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 121\n\n\nstate 94\n\n    (45) untilbody -> UNTIL LPARENT instructions . RPARENT condition\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 122\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 95\n\n    (46) whilebody -> WHILE condition LPARENT . instructions RPARENT\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 123\n    empty                          shift and go to state 16\n\nstate 96\n\n    (56) condition -> ID comparator . ID\n    (57) condition -> ID comparator . NUMBER\n\n    ID              shift and go to state 124\n    NUMBER          shift and go to state 125\n\n\nstate 97\n\n    (34) comparator -> GT .\n\n    ID              reduce using rule 34 (comparator -> GT .)\n    NUMBER          reduce using rule 34 (comparator -> GT .)\n\n\nstate 98\n\n    (35) comparator -> LT .\n\n    ID              reduce using rule 35 (comparator -> LT .)\n    NUMBER          reduce using rule 35 (comparator -> LT .)\n\n\nstate 99\n\n    (36) comparator -> GET .\n\n    ID              reduce using rule 36 (comparator -> GET .)\n    NUMBER          reduce using rule 36 (comparator -> GET .)\n\n\nstate 100\n\n    (37) comparator -> LET .\n\n    ID              reduce using rule 37 (comparator -> LET .)\n    NUMBER          reduce using rule 37 (comparator -> LET .)\n\n\nstate 101\n\n    (38) comparator -> EQ .\n\n    ID              reduce using rule 38 (comparator -> EQ .)\n    NUMBER          reduce using rule 38 (comparator -> EQ .)\n\n\nstate 102\n\n    (39) comparator -> DT .\n\n    ID              reduce using rule 39 (comparator -> DT .)\n    NUMBER          reduce using rule 39 (comparator -> DT .)\n\n\nstate 103\n\n    (58) condition -> NUMBER comparator . ID\n    (59) condition -> NUMBER comparator . NUMBER\n\n    ID              shift and go to state 127\n    NUMBER          shift and go to state 126\n\n\nstate 104\n\n    (47) casebody -> CASE WHEN LPARENT . condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (56) condition -> . ID comparator ID\n    (57) condition -> . ID comparator NUMBER\n    (58) condition -> . NUMBER comparator ID\n    (59) condition -> . NUMBER comparator NUMBER\n    (60) condition -> . TRUE\n    (61) condition -> . FALSE\n    (62) condition -> . istrue\n    (63) istrue -> . VERT LPARENT ID RPARENT\n\n    ID              shift and go to state 60\n    NUMBER          shift and go to state 61\n    TRUE            shift and go to state 62\n    FALSE           shift and go to state 63\n    VERT            shift and go to state 38\n\n    condition                      shift and go to state 128\n    istrue                         shift and go to state 64\n\nstate 105\n\n    (51) casebody -> CASE ID innercasebody .\n\n    SEMICOLON       reduce using rule 51 (casebody -> CASE ID innercasebody .)\n\n\nstate 106\n\n    (52) innercasebody -> WHEN . NUMBER THEN LPARENT instructions RPARENT innercasebody\n    (53) innercasebody -> WHEN . TRUE THEN LPARENT instructions RPARENT innercasebody\n    (54) innercasebody -> WHEN . FALSE THEN LPARENT instructions RPARENT innercasebody\n\n    NUMBER          shift and go to state 129\n    TRUE            shift and go to state 130\n    FALSE           shift and go to state 131\n\n\nstate 107\n\n    (55) innercasebody -> empty .\n\n    SEMICOLON       reduce using rule 55 (innercasebody -> empty .)\n\n\nstate 108\n\n    (63) istrue -> VERT LPARENT ID . RPARENT\n\n    RPARENT         shift and go to state 132\n\n\nstate 109\n\n    (49) case_else -> ELSE LPARENT instructions . RPARENT\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 133\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 110\n\n    (4) procedures -> PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures .\n\n    PRINCIPAL       reduce using rule 4 (procedures -> PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures .)\n    PROCEDURE       reduce using rule 4 (procedures -> PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures .)\n    $end            reduce using rule 4 (procedures -> PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures .)\n\n\nstate 111\n\n    (6) instructions -> instructions NEW ID LPARENT datatype . COMMA value RPARENT SEMICOLON commentary\n\n    COMMA           shift and go to state 134\n\n\nstate 112\n\n    (24) datatype -> NUMVAL .\n\n    COMMA           reduce using rule 24 (datatype -> NUMVAL .)\n\n\nstate 113\n\n    (25) datatype -> BOOLVAL .\n\n    COMMA           reduce using rule 25 (datatype -> BOOLVAL .)\n\n\nstate 114\n\n    (7) instructions -> instructions VALUES LPARENT ID COMMA . value RPARENT SEMICOLON commentary\n    (26) value -> . NUMBER\n    (27) value -> . TRUE\n    (28) value -> . FALSE\n    (29) value -> . ALTER LPARENT ID COMMA operator COMMA value RPARENT\n\n    NUMBER          shift and go to state 136\n    TRUE            shift and go to state 137\n    FALSE           shift and go to state 138\n    ALTER           shift and go to state 139\n\n    value                          shift and go to state 135\n\nstate 115\n\n    (8) instructions -> instructions ALTER LPARENT ID COMMA . operator COMMA value RPARENT SEMICOLON commentary\n    (30) operator -> . ADD\n    (31) operator -> . SUB\n    (32) operator -> . MUL\n    (33) operator -> . DIV\n\n    ADD             shift and go to state 141\n    SUB             shift and go to state 142\n    MUL             shift and go to state 143\n    DIV             shift and go to state 144\n\n    operator                       shift and go to state 140\n\nstate 116\n\n    (9) instructions -> instructions ALTERB LPARENT ID RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 145\n\n\nstate 117\n\n    (12) instructions -> instructions HAMMER LPARENT position RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 146\n\n\nstate 118\n\n    (44) repeat_instructions -> instructions BREAK .\n\n    RPARENT         reduce using rule 44 (repeat_instructions -> instructions BREAK .)\n\n\nstate 119\n\n    (14) instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 147\n\n\nstate 120\n\n    (18) instructions -> instructions PRINT LPARENT startvalue RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 148\n\n\nstate 121\n\n    (20) instructions -> instructions CALL LPARENT ID RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 149\n\n\nstate 122\n\n    (45) untilbody -> UNTIL LPARENT instructions RPARENT . condition\n    (56) condition -> . ID comparator ID\n    (57) condition -> . ID comparator NUMBER\n    (58) condition -> . NUMBER comparator ID\n    (59) condition -> . NUMBER comparator NUMBER\n    (60) condition -> . TRUE\n    (61) condition -> . FALSE\n    (62) condition -> . istrue\n    (63) istrue -> . VERT LPARENT ID RPARENT\n\n    ID              shift and go to state 60\n    NUMBER          shift and go to state 61\n    TRUE            shift and go to state 62\n    FALSE           shift and go to state 63\n    VERT            shift and go to state 38\n\n    condition                      shift and go to state 150\n    istrue                         shift and go to state 64\n\nstate 123\n\n    (46) whilebody -> WHILE condition LPARENT instructions . RPARENT\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 151\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 124\n\n    (56) condition -> ID comparator ID .\n\n    LPARENT         reduce using rule 56 (condition -> ID comparator ID .)\n    RPARENT         reduce using rule 56 (condition -> ID comparator ID .)\n    SEMICOLON       reduce using rule 56 (condition -> ID comparator ID .)\n\n\nstate 125\n\n    (57) condition -> ID comparator NUMBER .\n\n    LPARENT         reduce using rule 57 (condition -> ID comparator NUMBER .)\n    RPARENT         reduce using rule 57 (condition -> ID comparator NUMBER .)\n    SEMICOLON       reduce using rule 57 (condition -> ID comparator NUMBER .)\n\n\nstate 126\n\n    (59) condition -> NUMBER comparator NUMBER .\n\n    LPARENT         reduce using rule 59 (condition -> NUMBER comparator NUMBER .)\n    RPARENT         reduce using rule 59 (condition -> NUMBER comparator NUMBER .)\n    SEMICOLON       reduce using rule 59 (condition -> NUMBER comparator NUMBER .)\n\n\nstate 127\n\n    (58) condition -> NUMBER comparator ID .\n\n    LPARENT         reduce using rule 58 (condition -> NUMBER comparator ID .)\n    RPARENT         reduce using rule 58 (condition -> NUMBER comparator ID .)\n    SEMICOLON       reduce using rule 58 (condition -> NUMBER comparator ID .)\n\n\nstate 128\n\n    (47) casebody -> CASE WHEN LPARENT condition . RPARENT THEN LPARENT instructions RPARENT casebody\n\n    RPARENT         shift and go to state 152\n\n\nstate 129\n\n    (52) innercasebody -> WHEN NUMBER . THEN LPARENT instructions RPARENT innercasebody\n\n    THEN            shift and go to state 153\n\n\nstate 130\n\n    (53) innercasebody -> WHEN TRUE . THEN LPARENT instructions RPARENT innercasebody\n\n    THEN            shift and go to state 154\n\n\nstate 131\n\n    (54) innercasebody -> WHEN FALSE . THEN LPARENT instructions RPARENT innercasebody\n\n    THEN            shift and go to state 155\n\n\nstate 132\n\n    (63) istrue -> VERT LPARENT ID RPARENT .\n\n    SEMICOLON       reduce using rule 63 (istrue -> VERT LPARENT ID RPARENT .)\n    LPARENT         reduce using rule 63 (istrue -> VERT LPARENT ID RPARENT .)\n    RPARENT         reduce using rule 63 (istrue -> VERT LPARENT ID RPARENT .)\n\n\nstate 133\n\n    (49) case_else -> ELSE LPARENT instructions RPARENT .\n\n    SEMICOLON       reduce using rule 49 (case_else -> ELSE LPARENT instructions RPARENT .)\n\n\nstate 134\n\n    (6) instructions -> instructions NEW ID LPARENT datatype COMMA . value RPARENT SEMICOLON commentary\n    (26) value -> . NUMBER\n    (27) value -> . TRUE\n    (28) value -> . FALSE\n    (29) value -> . ALTER LPARENT ID COMMA operator COMMA value RPARENT\n\n    NUMBER          shift and go to state 136\n    TRUE            shift and go to state 137\n    FALSE           shift and go to state 138\n    ALTER           shift and go to state 139\n\n    value                          shift and go to state 156\n\nstate 135\n\n    (7) instructions -> instructions VALUES LPARENT ID COMMA value . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 157\n\n\nstate 136\n\n    (26) value -> NUMBER .\n\n    RPARENT         reduce using rule 26 (value -> NUMBER .)\n\n\nstate 137\n\n    (27) value -> TRUE .\n\n    RPARENT         reduce using rule 27 (value -> TRUE .)\n\n\nstate 138\n\n    (28) value -> FALSE .\n\n    RPARENT         reduce using rule 28 (value -> FALSE .)\n\n\nstate 139\n\n    (29) value -> ALTER . LPARENT ID COMMA operator COMMA value RPARENT\n\n    LPARENT         shift and go to state 158\n\n\nstate 140\n\n    (8) instructions -> instructions ALTER LPARENT ID COMMA operator . COMMA value RPARENT SEMICOLON commentary\n\n    COMMA           shift and go to state 159\n\n\nstate 141\n\n    (30) operator -> ADD .\n\n    COMMA           reduce using rule 30 (operator -> ADD .)\n\n\nstate 142\n\n    (31) operator -> SUB .\n\n    COMMA           reduce using rule 31 (operator -> SUB .)\n\n\nstate 143\n\n    (32) operator -> MUL .\n\n    COMMA           reduce using rule 32 (operator -> MUL .)\n\n\nstate 144\n\n    (33) operator -> DIV .\n\n    COMMA           reduce using rule 33 (operator -> DIV .)\n\n\nstate 145\n\n    (9) instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 160\n    empty                          shift and go to state 76\n\nstate 146\n\n    (12) instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 161\n    empty                          shift and go to state 76\n\nstate 147\n\n    (14) instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 162\n    empty                          shift and go to state 76\n\nstate 148\n\n    (18) instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 163\n    empty                          shift and go to state 76\n\nstate 149\n\n    (20) instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 164\n    empty                          shift and go to state 76\n\nstate 150\n\n    (45) untilbody -> UNTIL LPARENT instructions RPARENT condition .\n\n    SEMICOLON       reduce using rule 45 (untilbody -> UNTIL LPARENT instructions RPARENT condition .)\n\n\nstate 151\n\n    (46) whilebody -> WHILE condition LPARENT instructions RPARENT .\n\n    SEMICOLON       reduce using rule 46 (whilebody -> WHILE condition LPARENT instructions RPARENT .)\n\n\nstate 152\n\n    (47) casebody -> CASE WHEN LPARENT condition RPARENT . THEN LPARENT instructions RPARENT casebody\n\n    THEN            shift and go to state 165\n\n\nstate 153\n\n    (52) innercasebody -> WHEN NUMBER THEN . LPARENT instructions RPARENT innercasebody\n\n    LPARENT         shift and go to state 166\n\n\nstate 154\n\n    (53) innercasebody -> WHEN TRUE THEN . LPARENT instructions RPARENT innercasebody\n\n    LPARENT         shift and go to state 167\n\n\nstate 155\n\n    (54) innercasebody -> WHEN FALSE THEN . LPARENT instructions RPARENT innercasebody\n\n    LPARENT         shift and go to state 168\n\n\nstate 156\n\n    (6) instructions -> instructions NEW ID LPARENT datatype COMMA value . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 169\n\n\nstate 157\n\n    (7) instructions -> instructions VALUES LPARENT ID COMMA value RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 170\n\n\nstate 158\n\n    (29) value -> ALTER LPARENT . ID COMMA operator COMMA value RPARENT\n\n    ID              shift and go to state 171\n\n\nstate 159\n\n    (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA . value RPARENT SEMICOLON commentary\n    (26) value -> . NUMBER\n    (27) value -> . TRUE\n    (28) value -> . FALSE\n    (29) value -> . ALTER LPARENT ID COMMA operator COMMA value RPARENT\n\n    NUMBER          shift and go to state 136\n    TRUE            shift and go to state 137\n    FALSE           shift and go to state 138\n    ALTER           shift and go to state 139\n\n    value                          shift and go to state 172\n\nstate 160\n\n    (9) instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)\n\n\nstate 161\n\n    (12) instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)\n\n\nstate 162\n\n    (14) instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)\n\n\nstate 163\n\n    (18) instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)\n\n\nstate 164\n\n    (20) instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)\n\n\nstate 165\n\n    (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN . LPARENT instructions RPARENT casebody\n\n    LPARENT         shift and go to state 173\n\n\nstate 166\n\n    (52) innercasebody -> WHEN NUMBER THEN LPARENT . instructions RPARENT innercasebody\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 174\n    empty                          shift and go to state 16\n\nstate 167\n\n    (53) innercasebody -> WHEN TRUE THEN LPARENT . instructions RPARENT innercasebody\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 175\n    empty                          shift and go to state 16\n\nstate 168\n\n    (54) innercasebody -> WHEN FALSE THEN LPARENT . instructions RPARENT innercasebody\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 176\n    empty                          shift and go to state 16\n\nstate 169\n\n    (6) instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 177\n\n\nstate 170\n\n    (7) instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 178\n    empty                          shift and go to state 76\n\nstate 171\n\n    (29) value -> ALTER LPARENT ID . COMMA operator COMMA value RPARENT\n\n    COMMA           shift and go to state 179\n\n\nstate 172\n\n    (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value . RPARENT SEMICOLON commentary\n\n    RPARENT         shift and go to state 180\n\n\nstate 173\n\n    (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT . instructions RPARENT casebody\n    (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> . instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> . instructions MOVR SEMICOLON commentary\n    (11) instructions -> . instructions MOVL SEMICOLON commentary\n    (12) instructions -> . instructions HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> . instructions STOP SEMICOLON commentary\n    (14) instructions -> . instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> . instructions untilbody SEMICOLON commentary\n    (16) instructions -> . instructions whilebody SEMICOLON commentary\n    (17) instructions -> . instructions casebody SEMICOLON commentary\n    (18) instructions -> . instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> . instructions istrue SEMICOLON commentary\n    (20) instructions -> . instructions CALL LPARENT ID RPARENT SEMICOLON commentary\n    (21) instructions -> . empty\n    (67) empty -> .\n\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    instructions                   shift and go to state 181\n    empty                          shift and go to state 16\n\nstate 174\n\n    (52) innercasebody -> WHEN NUMBER THEN LPARENT instructions . RPARENT innercasebody\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 182\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 175\n\n    (53) innercasebody -> WHEN TRUE THEN LPARENT instructions . RPARENT innercasebody\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 183\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 176\n\n    (54) innercasebody -> WHEN FALSE THEN LPARENT instructions . RPARENT innercasebody\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 184\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    casebody                       shift and go to state 30\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 177\n\n    (6) instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 185\n    empty                          shift and go to state 76\n\nstate 178\n\n    (7) instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)\n\n\nstate 179\n\n    (29) value -> ALTER LPARENT ID COMMA . operator COMMA value RPARENT\n    (30) operator -> . ADD\n    (31) operator -> . SUB\n    (32) operator -> . MUL\n    (33) operator -> . DIV\n\n    ADD             shift and go to state 141\n    SUB             shift and go to state 142\n    MUL             shift and go to state 143\n    DIV             shift and go to state 144\n\n    operator                       shift and go to state 186\n\nstate 180\n\n    (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT . SEMICOLON commentary\n\n    SEMICOLON       shift and go to state 187\n\n\nstate 181\n\n    (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions . RPARENT casebody\n    (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary\n    (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary\n    (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary\n    (9) instructions -> instructions . ALTERB LPARENT ID RPARENT SEMICOLON commentary\n    (10) instructions -> instructions . MOVR SEMICOLON commentary\n    (11) instructions -> instructions . MOVL SEMICOLON commentary\n    (12) instructions -> instructions . HAMMER LPARENT position RPARENT SEMICOLON commentary\n    (13) instructions -> instructions . STOP SEMICOLON commentary\n    (14) instructions -> instructions . REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary\n    (15) instructions -> instructions . untilbody SEMICOLON commentary\n    (16) instructions -> instructions . whilebody SEMICOLON commentary\n    (17) instructions -> instructions . casebody SEMICOLON commentary\n    (18) instructions -> instructions . PRINT LPARENT startvalue RPARENT SEMICOLON commentary\n    (19) instructions -> instructions . istrue SEMICOLON commentary\n    (20) instructions -> instructions . CALL LPARENT ID RPARENT SEMICOLON commentary\n    (45) untilbody -> . UNTIL LPARENT instructions RPARENT condition\n    (46) whilebody -> . WHILE condition LPARENT instructions RPARENT\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (63) istrue -> . VERT LPARENT ID RPARENT\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    RPARENT         shift and go to state 188\n    NEW             shift and go to state 19\n    VALUES          shift and go to state 20\n    ALTER           shift and go to state 21\n    ALTERB          shift and go to state 22\n    MOVR            shift and go to state 23\n    MOVL            shift and go to state 24\n    HAMMER          shift and go to state 25\n    STOP            shift and go to state 26\n    REPEAT          shift and go to state 27\n    PRINT           shift and go to state 31\n    CALL            shift and go to state 33\n    UNTIL           shift and go to state 34\n    WHILE           shift and go to state 35\n    CASE            shift and go to state 36\n    VERT            shift and go to state 38\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    casebody                       shift and go to state 30\n    untilbody                      shift and go to state 28\n    whilebody                      shift and go to state 29\n    istrue                         shift and go to state 32\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 182\n\n    (52) innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT . innercasebody\n    (52) innercasebody -> . WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody\n    (53) innercasebody -> . WHEN TRUE THEN LPARENT instructions RPARENT innercasebody\n    (54) innercasebody -> . WHEN FALSE THEN LPARENT instructions RPARENT innercasebody\n    (55) innercasebody -> . empty\n    (67) empty -> .\n\n    WHEN            shift and go to state 106\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    innercasebody                  shift and go to state 189\n    empty                          shift and go to state 107\n\nstate 183\n\n    (53) innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT . innercasebody\n    (52) innercasebody -> . WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody\n    (53) innercasebody -> . WHEN TRUE THEN LPARENT instructions RPARENT innercasebody\n    (54) innercasebody -> . WHEN FALSE THEN LPARENT instructions RPARENT innercasebody\n    (55) innercasebody -> . empty\n    (67) empty -> .\n\n    WHEN            shift and go to state 106\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    innercasebody                  shift and go to state 190\n    empty                          shift and go to state 107\n\nstate 184\n\n    (54) innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT . innercasebody\n    (52) innercasebody -> . WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody\n    (53) innercasebody -> . WHEN TRUE THEN LPARENT instructions RPARENT innercasebody\n    (54) innercasebody -> . WHEN FALSE THEN LPARENT instructions RPARENT innercasebody\n    (55) innercasebody -> . empty\n    (67) empty -> .\n\n    WHEN            shift and go to state 106\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    innercasebody                  shift and go to state 191\n    empty                          shift and go to state 107\n\nstate 185\n\n    (6) instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)\n\n\nstate 186\n\n    (29) value -> ALTER LPARENT ID COMMA operator . COMMA value RPARENT\n\n    COMMA           shift and go to state 192\n\n\nstate 187\n\n    (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON . commentary\n    (22) commentary -> . COMMENT\n    (23) commentary -> . empty\n    (67) empty -> .\n\n    COMMENT         shift and go to state 75\n    RPARENT         reduce using rule 67 (empty -> .)\n    NEW             reduce using rule 67 (empty -> .)\n    VALUES          reduce using rule 67 (empty -> .)\n    ALTER           reduce using rule 67 (empty -> .)\n    ALTERB          reduce using rule 67 (empty -> .)\n    MOVR            reduce using rule 67 (empty -> .)\n    MOVL            reduce using rule 67 (empty -> .)\n    HAMMER          reduce using rule 67 (empty -> .)\n    STOP            reduce using rule 67 (empty -> .)\n    REPEAT          reduce using rule 67 (empty -> .)\n    PRINT           reduce using rule 67 (empty -> .)\n    CALL            reduce using rule 67 (empty -> .)\n    UNTIL           reduce using rule 67 (empty -> .)\n    WHILE           reduce using rule 67 (empty -> .)\n    CASE            reduce using rule 67 (empty -> .)\n    VERT            reduce using rule 67 (empty -> .)\n    ELSE            reduce using rule 67 (empty -> .)\n    SEMICOLON       reduce using rule 67 (empty -> .)\n    BREAK           reduce using rule 67 (empty -> .)\n\n    commentary                     shift and go to state 193\n    empty                          shift and go to state 76\n\nstate 188\n\n    (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT . casebody\n    (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody\n    (48) casebody -> . case_else\n    (51) casebody -> . CASE ID innercasebody\n    (49) case_else -> . ELSE LPARENT instructions RPARENT\n    (50) case_else -> . empty\n    (67) empty -> .\n\n    CASE            shift and go to state 36\n    ELSE            shift and go to state 39\n    SEMICOLON       reduce using rule 67 (empty -> .)\n\n    casebody                       shift and go to state 194\n    case_else                      shift and go to state 37\n    empty                          shift and go to state 40\n\nstate 189\n\n    (52) innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody .\n\n    SEMICOLON       reduce using rule 52 (innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody .)\n\n\nstate 190\n\n    (53) innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT innercasebody .\n\n    SEMICOLON       reduce using rule 53 (innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT innercasebody .)\n\n\nstate 191\n\n    (54) innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT innercasebody .\n\n    SEMICOLON       reduce using rule 54 (innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT innercasebody .)\n\n\nstate 192\n\n    (29) value -> ALTER LPARENT ID COMMA operator COMMA . value RPARENT\n    (26) value -> . NUMBER\n    (27) value -> . TRUE\n    (28) value -> . FALSE\n    (29) value -> . ALTER LPARENT ID COMMA operator COMMA value RPARENT\n\n    NUMBER          shift and go to state 136\n    TRUE            shift and go to state 137\n    FALSE           shift and go to state 138\n    ALTER           shift and go to state 139\n\n    value                          shift and go to state 195\n\nstate 193\n\n    (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .\n\n    RPARENT         reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    NEW             reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    VALUES          reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    ALTER           reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    ALTERB          reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    MOVR            reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    MOVL            reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    HAMMER          reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    STOP            reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    REPEAT          reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    PRINT           reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    CALL            reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    UNTIL           reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    WHILE           reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    CASE            reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    VERT            reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    ELSE            reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    SEMICOLON       reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n    BREAK           reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)\n\n\nstate 194\n\n    (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody .\n\n    SEMICOLON       reduce using rule 47 (casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody .)\n\n\nstate 195\n\n    (29) value -> ALTER LPARENT ID COMMA operator COMMA value . RPARENT\n\n    RPARENT         shift and go to state 196\n\n\nstate 196\n\n    (29) value -> ALTER LPARENT ID COMMA operator COMMA value RPARENT .\n\n    RPARENT         reduce using rule 29 (value -> ALTER LPARENT ID COMMA operator COMMA value RPARENT .)\n\nWARNING: \nWARNING: Conflicts:\nWARNING: \nWARNING: shift/reduce conflict for PROCEDURE in state 2 resolved as shift\nWARNING: shift/reduce conflict for PROCEDURE in state 69 resolved as shift\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parser.out b/parser.out
--- a/parser.out	(revision f4151b8e3d49fa3fae84c0a68a8549c474704789)
+++ b/parser.out	(date 1663917274146)
@@ -46,7 +46,7 @@
 Rule 41    position -> SOUTH
 Rule 42    position -> EAST
 Rule 43    position -> WEST
-Rule 44    repeat_instructions -> instructions BREAK
+Rule 44    repeat_instructions -> instructions BREAK SEMICOLON commentary
 Rule 45    untilbody -> UNTIL LPARENT instructions RPARENT condition
 Rule 46    whilebody -> WHILE condition LPARENT instructions RPARENT
 Rule 47    casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody
@@ -107,7 +107,7 @@
 PROCEDURE            : 4
 REPEAT               : 14
 RPARENT              : 2 4 6 7 8 9 12 14 18 20 29 45 46 47 47 49 52 53 54 63
-SEMICOLON            : 2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
+SEMICOLON            : 2 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 44
 SOUTH                : 41
 STOP                 : 13
 STRING               : 64
@@ -126,7 +126,7 @@
 
 case_else            : 48
 casebody             : 17 47
-commentary           : 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
+commentary           : 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 44
 comparator           : 56 57 58 59
 condition            : 45 46 47
 datatype             : 6
@@ -820,7 +820,7 @@
 state 51
 
     (14) instructions -> instructions REPEAT LPARENT . repeat_instructions RPARENT SEMICOLON commentary
-    (44) repeat_instructions -> . instructions BREAK
+    (44) repeat_instructions -> . instructions BREAK SEMICOLON commentary
     (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
     (7) instructions -> . instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary
     (8) instructions -> . instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary
@@ -1404,7 +1404,7 @@
 
 state 84
 
-    (44) repeat_instructions -> instructions . BREAK
+    (44) repeat_instructions -> instructions . BREAK SEMICOLON commentary
     (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
     (7) instructions -> instructions . VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary
     (8) instructions -> instructions . ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary
@@ -1937,30 +1937,30 @@
 
 state 118
 
-    (44) repeat_instructions -> instructions BREAK .
+    (44) repeat_instructions -> instructions BREAK . SEMICOLON commentary
 
-    RPARENT         reduce using rule 44 (repeat_instructions -> instructions BREAK .)
+    SEMICOLON       shift and go to state 147
 
 
 state 119
 
     (14) instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT . SEMICOLON commentary
 
-    SEMICOLON       shift and go to state 147
+    SEMICOLON       shift and go to state 148
 
 
 state 120
 
     (18) instructions -> instructions PRINT LPARENT startvalue RPARENT . SEMICOLON commentary
 
-    SEMICOLON       shift and go to state 148
+    SEMICOLON       shift and go to state 149
 
 
 state 121
 
     (20) instructions -> instructions CALL LPARENT ID RPARENT . SEMICOLON commentary
 
-    SEMICOLON       shift and go to state 149
+    SEMICOLON       shift and go to state 150
 
 
 state 122
@@ -1981,7 +1981,7 @@
     FALSE           shift and go to state 63
     VERT            shift and go to state 38
 
-    condition                      shift and go to state 150
+    condition                      shift and go to state 151
     istrue                         shift and go to state 64
 
 state 123
@@ -2012,7 +2012,7 @@
     (50) case_else -> . empty
     (67) empty -> .
 
-    RPARENT         shift and go to state 151
+    RPARENT         shift and go to state 152
     NEW             shift and go to state 19
     VALUES          shift and go to state 20
     ALTER           shift and go to state 21
@@ -2078,28 +2078,28 @@
 
     (47) casebody -> CASE WHEN LPARENT condition . RPARENT THEN LPARENT instructions RPARENT casebody
 
-    RPARENT         shift and go to state 152
+    RPARENT         shift and go to state 153
 
 
 state 129
 
     (52) innercasebody -> WHEN NUMBER . THEN LPARENT instructions RPARENT innercasebody
 
-    THEN            shift and go to state 153
+    THEN            shift and go to state 154
 
 
 state 130
 
     (53) innercasebody -> WHEN TRUE . THEN LPARENT instructions RPARENT innercasebody
 
-    THEN            shift and go to state 154
+    THEN            shift and go to state 155
 
 
 state 131
 
     (54) innercasebody -> WHEN FALSE . THEN LPARENT instructions RPARENT innercasebody
 
-    THEN            shift and go to state 155
+    THEN            shift and go to state 156
 
 
 state 132
@@ -2131,13 +2131,13 @@
     FALSE           shift and go to state 138
     ALTER           shift and go to state 139
 
-    value                          shift and go to state 156
+    value                          shift and go to state 157
 
 state 135
 
     (7) instructions -> instructions VALUES LPARENT ID COMMA value . RPARENT SEMICOLON commentary
 
-    RPARENT         shift and go to state 157
+    RPARENT         shift and go to state 158
 
 
 state 136
@@ -2165,14 +2165,14 @@
 
     (29) value -> ALTER . LPARENT ID COMMA operator COMMA value RPARENT
 
-    LPARENT         shift and go to state 158
+    LPARENT         shift and go to state 159
 
 
 state 140
 
     (8) instructions -> instructions ALTER LPARENT ID COMMA operator . COMMA value RPARENT SEMICOLON commentary
 
-    COMMA           shift and go to state 159
+    COMMA           shift and go to state 160
 
 
 state 141
@@ -2231,7 +2231,7 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 160
+    commentary                     shift and go to state 161
     empty                          shift and go to state 76
 
 state 146
@@ -2262,11 +2262,24 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 161
+    commentary                     shift and go to state 162
     empty                          shift and go to state 76
 
 state 147
 
+    (44) repeat_instructions -> instructions BREAK SEMICOLON . commentary
+    (22) commentary -> . COMMENT
+    (23) commentary -> . empty
+    (67) empty -> .
+
+    COMMENT         shift and go to state 75
+    RPARENT         reduce using rule 67 (empty -> .)
+
+    commentary                     shift and go to state 163
+    empty                          shift and go to state 76
+
+state 148
+
     (14) instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON . commentary
     (22) commentary -> . COMMENT
     (23) commentary -> . empty
@@ -2293,10 +2306,10 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 162
+    commentary                     shift and go to state 164
     empty                          shift and go to state 76
 
-state 148
+state 149
 
     (18) instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON . commentary
     (22) commentary -> . COMMENT
@@ -2324,10 +2337,10 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 163
+    commentary                     shift and go to state 165
     empty                          shift and go to state 76
 
-state 149
+state 150
 
     (20) instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON . commentary
     (22) commentary -> . COMMENT
@@ -2355,73 +2368,73 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 164
+    commentary                     shift and go to state 166
     empty                          shift and go to state 76
 
-state 150
+state 151
 
     (45) untilbody -> UNTIL LPARENT instructions RPARENT condition .
 
     SEMICOLON       reduce using rule 45 (untilbody -> UNTIL LPARENT instructions RPARENT condition .)
 
 
-state 151
+state 152
 
     (46) whilebody -> WHILE condition LPARENT instructions RPARENT .
 
     SEMICOLON       reduce using rule 46 (whilebody -> WHILE condition LPARENT instructions RPARENT .)
 
 
-state 152
+state 153
 
     (47) casebody -> CASE WHEN LPARENT condition RPARENT . THEN LPARENT instructions RPARENT casebody
 
-    THEN            shift and go to state 165
+    THEN            shift and go to state 167
 
 
-state 153
+state 154
 
     (52) innercasebody -> WHEN NUMBER THEN . LPARENT instructions RPARENT innercasebody
 
-    LPARENT         shift and go to state 166
+    LPARENT         shift and go to state 168
 
 
-state 154
+state 155
 
     (53) innercasebody -> WHEN TRUE THEN . LPARENT instructions RPARENT innercasebody
 
-    LPARENT         shift and go to state 167
+    LPARENT         shift and go to state 169
 
 
-state 155
+state 156
 
     (54) innercasebody -> WHEN FALSE THEN . LPARENT instructions RPARENT innercasebody
 
-    LPARENT         shift and go to state 168
-
-
-state 156
-
-    (6) instructions -> instructions NEW ID LPARENT datatype COMMA value . RPARENT SEMICOLON commentary
-
-    RPARENT         shift and go to state 169
+    LPARENT         shift and go to state 170
 
 
 state 157
 
-    (7) instructions -> instructions VALUES LPARENT ID COMMA value RPARENT . SEMICOLON commentary
+    (6) instructions -> instructions NEW ID LPARENT datatype COMMA value . RPARENT SEMICOLON commentary
 
-    SEMICOLON       shift and go to state 170
+    RPARENT         shift and go to state 171
 
 
 state 158
 
+    (7) instructions -> instructions VALUES LPARENT ID COMMA value RPARENT . SEMICOLON commentary
+
+    SEMICOLON       shift and go to state 172
+
+
+state 159
+
     (29) value -> ALTER LPARENT . ID COMMA operator COMMA value RPARENT
 
-    ID              shift and go to state 171
+    ID              shift and go to state 173
 
 
-state 159
+state 160
 
     (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA . value RPARENT SEMICOLON commentary
     (26) value -> . NUMBER
@@ -2434,9 +2447,9 @@
     FALSE           shift and go to state 138
     ALTER           shift and go to state 139
 
-    value                          shift and go to state 172
+    value                          shift and go to state 174
 
-state 160
+state 161
 
     (9) instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .
 
@@ -2461,7 +2474,7 @@
     BREAK           reduce using rule 9 (instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary .)
 
 
-state 161
+state 162
 
     (12) instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .
 
@@ -2486,7 +2499,14 @@
     BREAK           reduce using rule 12 (instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary .)
 
 
-state 162
+state 163
+
+    (44) repeat_instructions -> instructions BREAK SEMICOLON commentary .
+
+    RPARENT         reduce using rule 44 (repeat_instructions -> instructions BREAK SEMICOLON commentary .)
+
+
+state 164
 
     (14) instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .
 
@@ -2511,7 +2531,7 @@
     BREAK           reduce using rule 14 (instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary .)
 
 
-state 163
+state 165
 
     (18) instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .
 
@@ -2536,7 +2556,7 @@
     BREAK           reduce using rule 18 (instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary .)
 
 
-state 164
+state 166
 
     (20) instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .
 
@@ -2561,14 +2581,14 @@
     BREAK           reduce using rule 20 (instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary .)
 
 
-state 165
+state 167
 
     (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN . LPARENT instructions RPARENT casebody
 
-    LPARENT         shift and go to state 173
+    LPARENT         shift and go to state 175
 
 
-state 166
+state 168
 
     (52) innercasebody -> WHEN NUMBER THEN LPARENT . instructions RPARENT innercasebody
     (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -2608,10 +2628,10 @@
     ELSE            reduce using rule 67 (empty -> .)
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    instructions                   shift and go to state 174
+    instructions                   shift and go to state 176
     empty                          shift and go to state 16
 
-state 167
+state 169
 
     (53) innercasebody -> WHEN TRUE THEN LPARENT . instructions RPARENT innercasebody
     (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -2651,10 +2671,10 @@
     ELSE            reduce using rule 67 (empty -> .)
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    instructions                   shift and go to state 175
+    instructions                   shift and go to state 177
     empty                          shift and go to state 16
 
-state 168
+state 170
 
     (54) innercasebody -> WHEN FALSE THEN LPARENT . instructions RPARENT innercasebody
     (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -2694,17 +2714,17 @@
     ELSE            reduce using rule 67 (empty -> .)
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    instructions                   shift and go to state 176
+    instructions                   shift and go to state 178
     empty                          shift and go to state 16
 
-state 169
+state 171
 
     (6) instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT . SEMICOLON commentary
 
-    SEMICOLON       shift and go to state 177
+    SEMICOLON       shift and go to state 179
 
 
-state 170
+state 172
 
     (7) instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON . commentary
     (22) commentary -> . COMMENT
@@ -2732,24 +2752,24 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 178
+    commentary                     shift and go to state 180
     empty                          shift and go to state 76
 
-state 171
+state 173
 
     (29) value -> ALTER LPARENT ID . COMMA operator COMMA value RPARENT
 
-    COMMA           shift and go to state 179
+    COMMA           shift and go to state 181
 
 
-state 172
+state 174
 
     (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value . RPARENT SEMICOLON commentary
 
-    RPARENT         shift and go to state 180
+    RPARENT         shift and go to state 182
 
 
-state 173
+state 175
 
     (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT . instructions RPARENT casebody
     (6) instructions -> . instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -2789,10 +2809,10 @@
     ELSE            reduce using rule 67 (empty -> .)
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    instructions                   shift and go to state 181
+    instructions                   shift and go to state 183
     empty                          shift and go to state 16
 
-state 174
+state 176
 
     (52) innercasebody -> WHEN NUMBER THEN LPARENT instructions . RPARENT innercasebody
     (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -2820,7 +2840,7 @@
     (50) case_else -> . empty
     (67) empty -> .
 
-    RPARENT         shift and go to state 182
+    RPARENT         shift and go to state 184
     NEW             shift and go to state 19
     VALUES          shift and go to state 20
     ALTER           shift and go to state 21
@@ -2846,7 +2866,7 @@
     case_else                      shift and go to state 37
     empty                          shift and go to state 40
 
-state 175
+state 177
 
     (53) innercasebody -> WHEN TRUE THEN LPARENT instructions . RPARENT innercasebody
     (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -2874,7 +2894,7 @@
     (50) case_else -> . empty
     (67) empty -> .
 
-    RPARENT         shift and go to state 183
+    RPARENT         shift and go to state 185
     NEW             shift and go to state 19
     VALUES          shift and go to state 20
     ALTER           shift and go to state 21
@@ -2900,7 +2920,7 @@
     case_else                      shift and go to state 37
     empty                          shift and go to state 40
 
-state 176
+state 178
 
     (54) innercasebody -> WHEN FALSE THEN LPARENT instructions . RPARENT innercasebody
     (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -2928,7 +2948,7 @@
     (50) case_else -> . empty
     (67) empty -> .
 
-    RPARENT         shift and go to state 184
+    RPARENT         shift and go to state 186
     NEW             shift and go to state 19
     VALUES          shift and go to state 20
     ALTER           shift and go to state 21
@@ -2954,7 +2974,7 @@
     case_else                      shift and go to state 37
     empty                          shift and go to state 40
 
-state 177
+state 179
 
     (6) instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON . commentary
     (22) commentary -> . COMMENT
@@ -2982,10 +3002,10 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 185
+    commentary                     shift and go to state 187
     empty                          shift and go to state 76
 
-state 178
+state 180
 
     (7) instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .
 
@@ -3010,7 +3030,7 @@
     BREAK           reduce using rule 7 (instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary .)
 
 
-state 179
+state 181
 
     (29) value -> ALTER LPARENT ID COMMA . operator COMMA value RPARENT
     (30) operator -> . ADD
@@ -3023,16 +3043,16 @@
     MUL             shift and go to state 143
     DIV             shift and go to state 144
 
-    operator                       shift and go to state 186
+    operator                       shift and go to state 188
 
-state 180
+state 182
 
     (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT . SEMICOLON commentary
 
-    SEMICOLON       shift and go to state 187
+    SEMICOLON       shift and go to state 189
 
 
-state 181
+state 183
 
     (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions . RPARENT casebody
     (6) instructions -> instructions . NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary
@@ -3060,7 +3080,7 @@
     (50) case_else -> . empty
     (67) empty -> .
 
-    RPARENT         shift and go to state 188
+    RPARENT         shift and go to state 190
     NEW             shift and go to state 19
     VALUES          shift and go to state 20
     ALTER           shift and go to state 21
@@ -3086,7 +3106,7 @@
     case_else                      shift and go to state 37
     empty                          shift and go to state 40
 
-state 182
+state 184
 
     (52) innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT . innercasebody
     (52) innercasebody -> . WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody
@@ -3098,10 +3118,10 @@
     WHEN            shift and go to state 106
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    innercasebody                  shift and go to state 189
+    innercasebody                  shift and go to state 191
     empty                          shift and go to state 107
 
-state 183
+state 185
 
     (53) innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT . innercasebody
     (52) innercasebody -> . WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody
@@ -3113,10 +3133,10 @@
     WHEN            shift and go to state 106
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    innercasebody                  shift and go to state 190
+    innercasebody                  shift and go to state 192
     empty                          shift and go to state 107
 
-state 184
+state 186
 
     (54) innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT . innercasebody
     (52) innercasebody -> . WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody
@@ -3128,10 +3148,10 @@
     WHEN            shift and go to state 106
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    innercasebody                  shift and go to state 191
+    innercasebody                  shift and go to state 193
     empty                          shift and go to state 107
 
-state 185
+state 187
 
     (6) instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .
 
@@ -3156,14 +3176,14 @@
     BREAK           reduce using rule 6 (instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary .)
 
 
-state 186
+state 188
 
     (29) value -> ALTER LPARENT ID COMMA operator . COMMA value RPARENT
 
-    COMMA           shift and go to state 192
+    COMMA           shift and go to state 194
 
 
-state 187
+state 189
 
     (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON . commentary
     (22) commentary -> . COMMENT
@@ -3191,10 +3211,10 @@
     SEMICOLON       reduce using rule 67 (empty -> .)
     BREAK           reduce using rule 67 (empty -> .)
 
-    commentary                     shift and go to state 193
+    commentary                     shift and go to state 195
     empty                          shift and go to state 76
 
-state 188
+state 190
 
     (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT . casebody
     (47) casebody -> . CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody
@@ -3208,32 +3228,32 @@
     ELSE            shift and go to state 39
     SEMICOLON       reduce using rule 67 (empty -> .)
 
-    casebody                       shift and go to state 194
+    casebody                       shift and go to state 196
     case_else                      shift and go to state 37
     empty                          shift and go to state 40
 
-state 189
+state 191
 
     (52) innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody .
 
     SEMICOLON       reduce using rule 52 (innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody .)
 
 
-state 190
+state 192
 
     (53) innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT innercasebody .
 
     SEMICOLON       reduce using rule 53 (innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT innercasebody .)
 
 
-state 191
+state 193
 
     (54) innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT innercasebody .
 
     SEMICOLON       reduce using rule 54 (innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT innercasebody .)
 
 
-state 192
+state 194
 
     (29) value -> ALTER LPARENT ID COMMA operator COMMA . value RPARENT
     (26) value -> . NUMBER
@@ -3246,9 +3266,9 @@
     FALSE           shift and go to state 138
     ALTER           shift and go to state 139
 
-    value                          shift and go to state 195
+    value                          shift and go to state 197
 
-state 193
+state 195
 
     (8) instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .
 
@@ -3273,21 +3293,21 @@
     BREAK           reduce using rule 8 (instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary .)
 
 
-state 194
+state 196
 
     (47) casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody .
 
     SEMICOLON       reduce using rule 47 (casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody .)
 
 
-state 195
+state 197
 
     (29) value -> ALTER LPARENT ID COMMA operator COMMA value . RPARENT
 
-    RPARENT         shift and go to state 196
+    RPARENT         shift and go to state 198
 
 
-state 196
+state 198
 
     (29) value -> ALTER LPARENT ID COMMA operator COMMA value RPARENT .
 
Index: parsetab.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n# parsetab.py\n# This file is automatically generated. Do not edit.\n# pylint: disable=W,C,R\n_tabversion = '3.10'\n\n_lr_method = 'LALR'\n\n_lr_signature = 'ADD ALTER ALTERB BOOLVAL BREAK CALL CASE COMMA COMMENT DIV DT EAST ELSE EQ FALSE GET GT HAMMER ID LET LPARENT LT MOVL MOVR MUL NEW NORTH NUMBER NUMVAL PRINCIPAL PRINT PROCEDURE REPEAT RPARENT SEMICOLON SOUTH STOP STRING SUB THEN TRUE UNTIL VALUES VERT WEST WHEN WHILEprogram : COMMENT procedures principal procedures endprincipal : PRINCIPAL LPARENT instructions RPARENT SEMICOLONprincipal : emptyprocedures : PROCEDURE ID LPARENT instructions RPARENT SEMICOLON proceduresprocedures : emptyinstructions : instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentaryinstructions : instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentaryinstructions : instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentaryinstructions : instructions ALTERB LPARENT ID RPARENT SEMICOLON commentaryinstructions : instructions MOVR SEMICOLON commentaryinstructions : instructions MOVL SEMICOLON commentaryinstructions : instructions HAMMER LPARENT position RPARENT SEMICOLON commentaryinstructions : instructions STOP SEMICOLON commentaryinstructions : instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentaryinstructions : instructions untilbody SEMICOLON commentaryinstructions : instructions whilebody SEMICOLON commentaryinstructions : instructions casebody SEMICOLON commentaryinstructions : instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentaryinstructions : instructions istrue SEMICOLON commentaryinstructions : instructions CALL LPARENT ID RPARENT SEMICOLON commentaryinstructions : emptycommentary : COMMENTcommentary : emptydatatype : NUMVALdatatype : BOOLVALvalue : NUMBERvalue : TRUEvalue : FALSEvalue : ALTER LPARENT ID COMMA operator COMMA value RPARENToperator : ADDoperator : SUBoperator : MULoperator : DIVcomparator : GTcomparator : LTcomparator : GETcomparator : LETcomparator : EQcomparator : DTposition : NORTHposition : SOUTHposition : EASTposition : WESTrepeat_instructions : instructions BREAKuntilbody : UNTIL LPARENT instructions RPARENT conditionwhilebody : WHILE condition LPARENT instructions RPARENTcasebody : CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebodycasebody : case_elsecase_else : ELSE LPARENT instructions RPARENTcase_else : emptycasebody : CASE ID innercasebodyinnercasebody : WHEN NUMBER THEN LPARENT instructions RPARENT innercasebodyinnercasebody : WHEN TRUE THEN LPARENT instructions RPARENT innercasebodyinnercasebody : WHEN FALSE THEN LPARENT instructions RPARENT innercasebodyinnercasebody : emptycondition : ID comparator IDcondition : ID comparator NUMBERcondition : NUMBER comparator IDcondition : NUMBER comparator NUMBERcondition : TRUEcondition : FALSEcondition : istrueistrue : VERT LPARENT ID RPARENTstartvalue : STRINGstartvalue : IDend : emptyempty :'\n    \n_lr_action_items = {'COMMENT':([0,47,48,50,52,53,54,56,145,146,147,148,149,170,177,187,],[2,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'$end':([1,2,3,5,6,8,10,13,14,42,69,110,],[0,-67,-67,-5,-67,-3,-67,-1,-66,-2,-67,-4,]),'PROCEDURE':([2,3,5,6,8,42,69,110,],[4,-67,-5,4,-3,-2,4,-4,]),'PRINCIPAL':([2,3,5,69,110,],[-67,7,-5,-67,-4,]),'ID':([4,19,35,36,44,45,46,55,57,67,96,97,98,99,100,101,102,103,104,122,158,],[9,43,60,66,71,72,73,91,93,108,124,-34,-35,-36,-37,-38,-39,127,60,60,171,]),'LPARENT':([7,9,20,21,22,25,27,31,33,34,38,39,43,59,62,63,64,65,124,125,126,127,132,139,153,154,155,165,],[11,12,44,45,46,49,51,55,57,58,67,68,70,95,-60,-61,-62,104,-56,-57,-59,-58,-63,158,166,167,168,173,]),'RPARENT':([11,12,15,16,17,47,48,50,52,53,54,56,58,62,63,64,68,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,118,123,124,125,126,127,128,132,135,136,137,138,145,146,147,148,149,156,160,161,162,163,164,166,167,168,170,172,173,174,175,176,177,178,181,185,187,193,195,196,],[-67,-67,18,-21,41,-67,-67,-67,-67,-67,-67,-67,-67,-60,-61,-62,-67,116,-10,-22,-23,-11,117,-40,-41,-42,-43,-13,119,-15,-16,-17,120,-64,-65,-19,121,122,-67,132,133,-44,151,-56,-57,-59,-58,152,-63,157,-26,-27,-28,-67,-67,-67,-67,-67,169,-9,-12,-14,-18,-20,-67,-67,-67,-67,180,-67,182,183,184,-67,-7,188,-6,-67,-8,196,-29,]),'NEW':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,19,-21,19,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,19,-15,-16,-17,-19,19,-67,19,19,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,19,19,19,-67,-7,19,-6,-67,-8,]),'VALUES':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,20,-21,20,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,20,-15,-16,-17,-19,20,-67,20,20,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,20,20,20,-67,-7,20,-6,-67,-8,]),'ALTER':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,114,123,134,145,146,147,148,149,159,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,192,193,],[-67,-67,21,-21,21,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,21,-15,-16,-17,-19,21,-67,21,139,21,139,-67,-67,-67,-67,-67,139,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,21,21,21,-67,-7,21,-6,-67,139,-8,]),'ALTERB':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,22,-21,22,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,22,-15,-16,-17,-19,22,-67,22,22,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,22,22,22,-67,-7,22,-6,-67,-8,]),'MOVR':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,23,-21,23,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,23,-15,-16,-17,-19,23,-67,23,23,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,23,23,23,-67,-7,23,-6,-67,-8,]),'MOVL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,24,-21,24,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,24,-15,-16,-17,-19,24,-67,24,24,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,24,24,24,-67,-7,24,-6,-67,-8,]),'HAMMER':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,25,-21,25,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,25,-15,-16,-17,-19,25,-67,25,25,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,25,25,25,-67,-7,25,-6,-67,-8,]),'STOP':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,26,-21,26,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,26,-15,-16,-17,-19,26,-67,26,26,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,26,26,26,-67,-7,26,-6,-67,-8,]),'REPEAT':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,27,-21,27,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,27,-15,-16,-17,-19,27,-67,27,27,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,27,27,27,-67,-7,27,-6,-67,-8,]),'PRINT':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,31,-21,31,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,31,-15,-16,-17,-19,31,-67,31,31,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,31,31,31,-67,-7,31,-6,-67,-8,]),'CALL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,33,-21,33,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,33,-15,-16,-17,-19,33,-67,33,33,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,33,33,33,-67,-7,33,-6,-67,-8,]),'UNTIL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,34,-21,34,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,34,-15,-16,-17,-19,34,-67,34,34,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,34,34,34,-67,-7,34,-6,-67,-8,]),'WHILE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,35,-21,35,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,35,-15,-16,-17,-19,35,-67,35,35,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,35,35,35,-67,-7,35,-6,-67,-8,]),'CASE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,188,193,],[-67,-67,36,-21,36,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,36,-15,-16,-17,-19,36,-67,36,36,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,36,36,36,-67,-7,36,-6,-67,36,-8,]),'VERT':([11,12,15,16,17,35,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,104,109,122,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,38,-21,38,38,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,38,-15,-16,-17,-19,38,-67,38,38,38,38,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,38,38,38,-67,-7,38,-6,-67,-8,]),'ELSE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,188,193,],[-67,-67,39,-21,39,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,39,-15,-16,-17,-19,39,-67,39,39,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,39,39,39,-67,-7,39,-6,-67,39,-8,]),'SEMICOLON':([11,12,15,16,17,18,23,24,26,28,29,30,32,37,40,41,47,48,50,51,52,53,54,56,58,62,63,64,66,68,74,75,76,77,83,84,86,87,88,92,94,95,105,107,109,116,117,119,120,121,123,124,125,126,127,132,133,145,146,147,148,149,150,151,157,160,161,162,163,164,166,167,168,169,170,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,193,194,],[-67,-67,-67,-21,-67,42,47,48,50,52,53,54,56,-48,-50,69,-67,-67,-67,-67,-67,-67,-67,-67,-67,-60,-61,-62,-67,-67,-10,-22,-23,-11,-13,-67,-15,-16,-17,-19,-67,-67,-51,-55,-67,145,146,147,148,149,-67,-56,-57,-59,-58,-63,-49,-67,-67,-67,-67,-67,-45,-46,170,-9,-12,-14,-18,-20,-67,-67,-67,177,-67,-67,-67,-67,-67,-67,-7,187,-67,-67,-67,-67,-6,-67,-67,-52,-53,-54,-8,-47,]),'BREAK':([16,47,48,50,51,52,53,54,56,74,75,76,77,83,84,86,87,88,92,145,146,147,148,149,160,161,162,163,164,170,177,178,185,187,193,],[-21,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,118,-15,-16,-17,-19,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-7,-6,-67,-8,]),'NUMBER':([35,96,97,98,99,100,101,102,103,104,106,114,122,134,159,192,],[61,125,-34,-35,-36,-37,-38,-39,126,61,129,136,61,136,136,136,]),'TRUE':([35,104,106,114,122,134,159,192,],[62,62,130,137,62,137,137,137,]),'FALSE':([35,104,106,114,122,134,159,192,],[63,63,131,138,63,138,138,138,]),'WHEN':([36,66,182,183,184,],[65,106,106,106,106,]),'NORTH':([49,],[79,]),'SOUTH':([49,],[80,]),'EAST':([49,],[81,]),'WEST':([49,],[82,]),'STRING':([55,],[90,]),'GT':([60,61,],[97,97,]),'LT':([60,61,],[98,98,]),'GET':([60,61,],[99,99,]),'LET':([60,61,],[100,100,]),'EQ':([60,61,],[101,101,]),'DT':([60,61,],[102,102,]),'NUMVAL':([70,],[112,]),'BOOLVAL':([70,],[113,]),'COMMA':([71,72,111,112,113,140,141,142,143,144,171,186,],[114,115,134,-24,-25,159,-30,-31,-32,-33,179,192,]),'ADD':([115,179,],[141,141,]),'SUB':([115,179,],[142,142,]),'MUL':([115,179,],[143,143,]),'DIV':([115,179,],[144,144,]),'THEN':([129,130,131,152,],[153,154,155,165,]),}\n\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n\n_lr_goto_items = {'program':([0,],[1,]),'procedures':([2,6,69,],[3,10,110,]),'empty':([2,3,6,10,11,12,15,17,47,48,50,51,52,53,54,56,58,66,68,69,84,94,95,109,123,145,146,147,148,149,166,167,168,170,173,174,175,176,177,181,182,183,184,187,188,],[5,8,5,14,16,16,40,40,76,76,76,16,76,76,76,76,16,107,16,5,40,40,16,40,40,76,76,76,76,76,16,16,16,76,16,40,40,40,76,40,107,107,107,76,40,]),'principal':([3,],[6,]),'end':([10,],[13,]),'instructions':([11,12,51,58,68,95,166,167,168,173,],[15,17,84,94,109,123,174,175,176,181,]),'untilbody':([15,17,84,94,109,123,174,175,176,181,],[28,28,28,28,28,28,28,28,28,28,]),'whilebody':([15,17,84,94,109,123,174,175,176,181,],[29,29,29,29,29,29,29,29,29,29,]),'casebody':([15,17,84,94,109,123,174,175,176,181,188,],[30,30,30,30,30,30,30,30,30,30,194,]),'istrue':([15,17,35,84,94,104,109,122,123,174,175,176,181,],[32,32,64,32,32,64,32,64,32,32,32,32,32,]),'case_else':([15,17,84,94,109,123,174,175,176,181,188,],[37,37,37,37,37,37,37,37,37,37,37,]),'condition':([35,104,122,],[59,128,150,]),'commentary':([47,48,50,52,53,54,56,145,146,147,148,149,170,177,187,],[74,77,83,86,87,88,92,160,161,162,163,164,178,185,193,]),'position':([49,],[78,]),'repeat_instructions':([51,],[85,]),'startvalue':([55,],[89,]),'comparator':([60,61,],[96,103,]),'innercasebody':([66,182,183,184,],[105,189,190,191,]),'datatype':([70,],[111,]),'value':([114,134,159,192,],[135,156,172,195,]),'operator':([115,179,],[140,186,]),}\n\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> program\",\"S'\",1,None,None,None),\n  ('program -> COMMENT procedures principal procedures end','program',5,'p_program','SyntaxAnalyzer.py',11),\n  ('principal -> PRINCIPAL LPARENT instructions RPARENT SEMICOLON','principal',5,'p_principal','SyntaxAnalyzer.py',18),\n  ('principal -> empty','principal',1,'p_principalEmpty','SyntaxAnalyzer.py',23),\n  ('procedures -> PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures','procedures',7,'p_procedures','SyntaxAnalyzer.py',31),\n  ('procedures -> empty','procedures',1,'p_proceduresEmpty','SyntaxAnalyzer.py',36),\n  ('instructions -> instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary','instructions',10,'p_instructions1','SyntaxAnalyzer.py',41),\n  ('instructions -> instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary','instructions',9,'p_instructions2','SyntaxAnalyzer.py',46),\n  ('instructions -> instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary','instructions',11,'p_instructions3','SyntaxAnalyzer.py',54),\n  ('instructions -> instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary','instructions',7,'p_instructions4','SyntaxAnalyzer.py',62),\n  ('instructions -> instructions MOVR SEMICOLON commentary','instructions',4,'p_instructions5','SyntaxAnalyzer.py',67),\n  ('instructions -> instructions MOVL SEMICOLON commentary','instructions',4,'p_instructions6','SyntaxAnalyzer.py',72),\n  ('instructions -> instructions HAMMER LPARENT position RPARENT SEMICOLON commentary','instructions',7,'p_instructions7','SyntaxAnalyzer.py',77),\n  ('instructions -> instructions STOP SEMICOLON commentary','instructions',4,'p_instructions8','SyntaxAnalyzer.py',82),\n  ('instructions -> instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary','instructions',7,'p_instructions9','SyntaxAnalyzer.py',87),\n  ('instructions -> instructions untilbody SEMICOLON commentary','instructions',4,'p_instructions10','SyntaxAnalyzer.py',92),\n  ('instructions -> instructions whilebody SEMICOLON commentary','instructions',4,'p_instructions11','SyntaxAnalyzer.py',97),\n  ('instructions -> instructions casebody SEMICOLON commentary','instructions',4,'p_instructions12','SyntaxAnalyzer.py',102),\n  ('instructions -> instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary','instructions',7,'p_instructions13','SyntaxAnalyzer.py',107),\n  ('instructions -> instructions istrue SEMICOLON commentary','instructions',4,'p_instructions14','SyntaxAnalyzer.py',112),\n  ('instructions -> instructions CALL LPARENT ID RPARENT SEMICOLON commentary','instructions',7,'p_instructions15','SyntaxAnalyzer.py',117),\n  ('instructions -> empty','instructions',1,'p_instructionsEmpty','SyntaxAnalyzer.py',122),\n  ('commentary -> COMMENT','commentary',1,'p_commentary1','SyntaxAnalyzer.py',127),\n  ('commentary -> empty','commentary',1,'p_commentary2','SyntaxAnalyzer.py',131),\n  ('datatype -> NUMVAL','datatype',1,'p_datatype1','SyntaxAnalyzer.py',135),\n  ('datatype -> BOOLVAL','datatype',1,'p_datatype2','SyntaxAnalyzer.py',140),\n  ('value -> NUMBER','value',1,'p_value1','SyntaxAnalyzer.py',145),\n  ('value -> TRUE','value',1,'p_value2','SyntaxAnalyzer.py',150),\n  ('value -> FALSE','value',1,'p_value3','SyntaxAnalyzer.py',155),\n  ('value -> ALTER LPARENT ID COMMA operator COMMA value RPARENT','value',8,'p_value4','SyntaxAnalyzer.py',160),\n  ('operator -> ADD','operator',1,'p_operator1','SyntaxAnalyzer.py',165),\n  ('operator -> SUB','operator',1,'p_operator2','SyntaxAnalyzer.py',170),\n  ('operator -> MUL','operator',1,'p_operator3','SyntaxAnalyzer.py',175),\n  ('operator -> DIV','operator',1,'p_operator4','SyntaxAnalyzer.py',180),\n  ('comparator -> GT','comparator',1,'p_comparator1','SyntaxAnalyzer.py',185),\n  ('comparator -> LT','comparator',1,'p_comparator2','SyntaxAnalyzer.py',190),\n  ('comparator -> GET','comparator',1,'p_comparator3','SyntaxAnalyzer.py',195),\n  ('comparator -> LET','comparator',1,'p_comparator4','SyntaxAnalyzer.py',200),\n  ('comparator -> EQ','comparator',1,'p_comparator5','SyntaxAnalyzer.py',205),\n  ('comparator -> DT','comparator',1,'p_comparator6','SyntaxAnalyzer.py',210),\n  ('position -> NORTH','position',1,'p_position1','SyntaxAnalyzer.py',215),\n  ('position -> SOUTH','position',1,'p_position2','SyntaxAnalyzer.py',220),\n  ('position -> EAST','position',1,'p_position3','SyntaxAnalyzer.py',225),\n  ('position -> WEST','position',1,'p_position4','SyntaxAnalyzer.py',230),\n  ('repeat_instructions -> instructions BREAK','repeat_instructions',2,'p_repeatInstructions','SyntaxAnalyzer.py',235),\n  ('untilbody -> UNTIL LPARENT instructions RPARENT condition','untilbody',5,'p_untilbody','SyntaxAnalyzer.py',240),\n  ('whilebody -> WHILE condition LPARENT instructions RPARENT','whilebody',5,'p_whilebody','SyntaxAnalyzer.py',245),\n  ('casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody','casebody',10,'p_casebody1','SyntaxAnalyzer.py',250),\n  ('casebody -> case_else','casebody',1,'p_casebody2','SyntaxAnalyzer.py',254),\n  ('case_else -> ELSE LPARENT instructions RPARENT','case_else',4,'p_case_else1','SyntaxAnalyzer.py',259),\n  ('case_else -> empty','case_else',1,'p_case_else2','SyntaxAnalyzer.py',264),\n  ('casebody -> CASE ID innercasebody','casebody',3,'p_casebody3','SyntaxAnalyzer.py',269),\n  ('innercasebody -> WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody','innercasebody',7,'p_innercasebody1','SyntaxAnalyzer.py',274),\n  ('innercasebody -> WHEN TRUE THEN LPARENT instructions RPARENT innercasebody','innercasebody',7,'p_innercasebody2','SyntaxAnalyzer.py',279),\n  ('innercasebody -> WHEN FALSE THEN LPARENT instructions RPARENT innercasebody','innercasebody',7,'p_innercasebody3','SyntaxAnalyzer.py',284),\n  ('innercasebody -> empty','innercasebody',1,'p_innercasebodyEmpty','SyntaxAnalyzer.py',289),\n  ('condition -> ID comparator ID','condition',3,'p_condition1','SyntaxAnalyzer.py',293),\n  ('condition -> ID comparator NUMBER','condition',3,'p_condition2','SyntaxAnalyzer.py',298),\n  ('condition -> NUMBER comparator ID','condition',3,'p_condition3','SyntaxAnalyzer.py',303),\n  ('condition -> NUMBER comparator NUMBER','condition',3,'p_condition4','SyntaxAnalyzer.py',308),\n  ('condition -> TRUE','condition',1,'p_condition5','SyntaxAnalyzer.py',313),\n  ('condition -> FALSE','condition',1,'p_condition6','SyntaxAnalyzer.py',318),\n  ('condition -> istrue','condition',1,'p_condition7','SyntaxAnalyzer.py',323),\n  ('istrue -> VERT LPARENT ID RPARENT','istrue',4,'p_istrue','SyntaxAnalyzer.py',328),\n  ('startvalue -> STRING','startvalue',1,'p_startvalue1','SyntaxAnalyzer.py',333),\n  ('startvalue -> ID','startvalue',1,'p_startvalue2','SyntaxAnalyzer.py',338),\n  ('end -> empty','end',1,'p_end','SyntaxAnalyzer.py',342),\n  ('empty -> <empty>','empty',0,'p_empty','SyntaxAnalyzer.py',346),\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/parsetab.py b/parsetab.py
--- a/parsetab.py	(revision f4151b8e3d49fa3fae84c0a68a8549c474704789)
+++ b/parsetab.py	(date 1663917274146)
@@ -6,9 +6,9 @@
 
 _lr_method = 'LALR'
 
-_lr_signature = 'ADD ALTER ALTERB BOOLVAL BREAK CALL CASE COMMA COMMENT DIV DT EAST ELSE EQ FALSE GET GT HAMMER ID LET LPARENT LT MOVL MOVR MUL NEW NORTH NUMBER NUMVAL PRINCIPAL PRINT PROCEDURE REPEAT RPARENT SEMICOLON SOUTH STOP STRING SUB THEN TRUE UNTIL VALUES VERT WEST WHEN WHILEprogram : COMMENT procedures principal procedures endprincipal : PRINCIPAL LPARENT instructions RPARENT SEMICOLONprincipal : emptyprocedures : PROCEDURE ID LPARENT instructions RPARENT SEMICOLON proceduresprocedures : emptyinstructions : instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentaryinstructions : instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentaryinstructions : instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentaryinstructions : instructions ALTERB LPARENT ID RPARENT SEMICOLON commentaryinstructions : instructions MOVR SEMICOLON commentaryinstructions : instructions MOVL SEMICOLON commentaryinstructions : instructions HAMMER LPARENT position RPARENT SEMICOLON commentaryinstructions : instructions STOP SEMICOLON commentaryinstructions : instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentaryinstructions : instructions untilbody SEMICOLON commentaryinstructions : instructions whilebody SEMICOLON commentaryinstructions : instructions casebody SEMICOLON commentaryinstructions : instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentaryinstructions : instructions istrue SEMICOLON commentaryinstructions : instructions CALL LPARENT ID RPARENT SEMICOLON commentaryinstructions : emptycommentary : COMMENTcommentary : emptydatatype : NUMVALdatatype : BOOLVALvalue : NUMBERvalue : TRUEvalue : FALSEvalue : ALTER LPARENT ID COMMA operator COMMA value RPARENToperator : ADDoperator : SUBoperator : MULoperator : DIVcomparator : GTcomparator : LTcomparator : GETcomparator : LETcomparator : EQcomparator : DTposition : NORTHposition : SOUTHposition : EASTposition : WESTrepeat_instructions : instructions BREAKuntilbody : UNTIL LPARENT instructions RPARENT conditionwhilebody : WHILE condition LPARENT instructions RPARENTcasebody : CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebodycasebody : case_elsecase_else : ELSE LPARENT instructions RPARENTcase_else : emptycasebody : CASE ID innercasebodyinnercasebody : WHEN NUMBER THEN LPARENT instructions RPARENT innercasebodyinnercasebody : WHEN TRUE THEN LPARENT instructions RPARENT innercasebodyinnercasebody : WHEN FALSE THEN LPARENT instructions RPARENT innercasebodyinnercasebody : emptycondition : ID comparator IDcondition : ID comparator NUMBERcondition : NUMBER comparator IDcondition : NUMBER comparator NUMBERcondition : TRUEcondition : FALSEcondition : istrueistrue : VERT LPARENT ID RPARENTstartvalue : STRINGstartvalue : IDend : emptyempty :'
+_lr_signature = 'ADD ALTER ALTERB BOOLVAL BREAK CALL CASE COMMA COMMENT DIV DT EAST ELSE EQ FALSE GET GT HAMMER ID LET LPARENT LT MOVL MOVR MUL NEW NORTH NUMBER NUMVAL PRINCIPAL PRINT PROCEDURE REPEAT RPARENT SEMICOLON SOUTH STOP STRING SUB THEN TRUE UNTIL VALUES VERT WEST WHEN WHILEprogram : COMMENT procedures principal procedures endprincipal : PRINCIPAL LPARENT instructions RPARENT SEMICOLONprincipal : emptyprocedures : PROCEDURE ID LPARENT instructions RPARENT SEMICOLON proceduresprocedures : emptyinstructions : instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentaryinstructions : instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentaryinstructions : instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentaryinstructions : instructions ALTERB LPARENT ID RPARENT SEMICOLON commentaryinstructions : instructions MOVR SEMICOLON commentaryinstructions : instructions MOVL SEMICOLON commentaryinstructions : instructions HAMMER LPARENT position RPARENT SEMICOLON commentaryinstructions : instructions STOP SEMICOLON commentaryinstructions : instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentaryinstructions : instructions untilbody SEMICOLON commentaryinstructions : instructions whilebody SEMICOLON commentaryinstructions : instructions casebody SEMICOLON commentaryinstructions : instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentaryinstructions : instructions istrue SEMICOLON commentaryinstructions : instructions CALL LPARENT ID RPARENT SEMICOLON commentaryinstructions : emptycommentary : COMMENTcommentary : emptydatatype : NUMVALdatatype : BOOLVALvalue : NUMBERvalue : TRUEvalue : FALSEvalue : ALTER LPARENT ID COMMA operator COMMA value RPARENToperator : ADDoperator : SUBoperator : MULoperator : DIVcomparator : GTcomparator : LTcomparator : GETcomparator : LETcomparator : EQcomparator : DTposition : NORTHposition : SOUTHposition : EASTposition : WESTrepeat_instructions : instructions BREAK SEMICOLON commentaryuntilbody : UNTIL LPARENT instructions RPARENT conditionwhilebody : WHILE condition LPARENT instructions RPARENTcasebody : CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebodycasebody : case_elsecase_else : ELSE LPARENT instructions RPARENTcase_else : emptycasebody : CASE ID innercasebodyinnercasebody : WHEN NUMBER THEN LPARENT instructions RPARENT innercasebodyinnercasebody : WHEN TRUE THEN LPARENT instructions RPARENT innercasebodyinnercasebody : WHEN FALSE THEN LPARENT instructions RPARENT innercasebodyinnercasebody : emptycondition : ID comparator IDcondition : ID comparator NUMBERcondition : NUMBER comparator IDcondition : NUMBER comparator NUMBERcondition : TRUEcondition : FALSEcondition : istrueistrue : VERT LPARENT ID RPARENTstartvalue : STRINGstartvalue : IDend : emptyempty :'
     
-_lr_action_items = {'COMMENT':([0,47,48,50,52,53,54,56,145,146,147,148,149,170,177,187,],[2,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'$end':([1,2,3,5,6,8,10,13,14,42,69,110,],[0,-67,-67,-5,-67,-3,-67,-1,-66,-2,-67,-4,]),'PROCEDURE':([2,3,5,6,8,42,69,110,],[4,-67,-5,4,-3,-2,4,-4,]),'PRINCIPAL':([2,3,5,69,110,],[-67,7,-5,-67,-4,]),'ID':([4,19,35,36,44,45,46,55,57,67,96,97,98,99,100,101,102,103,104,122,158,],[9,43,60,66,71,72,73,91,93,108,124,-34,-35,-36,-37,-38,-39,127,60,60,171,]),'LPARENT':([7,9,20,21,22,25,27,31,33,34,38,39,43,59,62,63,64,65,124,125,126,127,132,139,153,154,155,165,],[11,12,44,45,46,49,51,55,57,58,67,68,70,95,-60,-61,-62,104,-56,-57,-59,-58,-63,158,166,167,168,173,]),'RPARENT':([11,12,15,16,17,47,48,50,52,53,54,56,58,62,63,64,68,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,118,123,124,125,126,127,128,132,135,136,137,138,145,146,147,148,149,156,160,161,162,163,164,166,167,168,170,172,173,174,175,176,177,178,181,185,187,193,195,196,],[-67,-67,18,-21,41,-67,-67,-67,-67,-67,-67,-67,-67,-60,-61,-62,-67,116,-10,-22,-23,-11,117,-40,-41,-42,-43,-13,119,-15,-16,-17,120,-64,-65,-19,121,122,-67,132,133,-44,151,-56,-57,-59,-58,152,-63,157,-26,-27,-28,-67,-67,-67,-67,-67,169,-9,-12,-14,-18,-20,-67,-67,-67,-67,180,-67,182,183,184,-67,-7,188,-6,-67,-8,196,-29,]),'NEW':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,19,-21,19,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,19,-15,-16,-17,-19,19,-67,19,19,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,19,19,19,-67,-7,19,-6,-67,-8,]),'VALUES':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,20,-21,20,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,20,-15,-16,-17,-19,20,-67,20,20,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,20,20,20,-67,-7,20,-6,-67,-8,]),'ALTER':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,114,123,134,145,146,147,148,149,159,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,192,193,],[-67,-67,21,-21,21,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,21,-15,-16,-17,-19,21,-67,21,139,21,139,-67,-67,-67,-67,-67,139,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,21,21,21,-67,-7,21,-6,-67,139,-8,]),'ALTERB':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,22,-21,22,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,22,-15,-16,-17,-19,22,-67,22,22,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,22,22,22,-67,-7,22,-6,-67,-8,]),'MOVR':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,23,-21,23,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,23,-15,-16,-17,-19,23,-67,23,23,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,23,23,23,-67,-7,23,-6,-67,-8,]),'MOVL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,24,-21,24,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,24,-15,-16,-17,-19,24,-67,24,24,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,24,24,24,-67,-7,24,-6,-67,-8,]),'HAMMER':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,25,-21,25,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,25,-15,-16,-17,-19,25,-67,25,25,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,25,25,25,-67,-7,25,-6,-67,-8,]),'STOP':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,26,-21,26,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,26,-15,-16,-17,-19,26,-67,26,26,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,26,26,26,-67,-7,26,-6,-67,-8,]),'REPEAT':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,27,-21,27,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,27,-15,-16,-17,-19,27,-67,27,27,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,27,27,27,-67,-7,27,-6,-67,-8,]),'PRINT':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,31,-21,31,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,31,-15,-16,-17,-19,31,-67,31,31,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,31,31,31,-67,-7,31,-6,-67,-8,]),'CALL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,33,-21,33,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,33,-15,-16,-17,-19,33,-67,33,33,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,33,33,33,-67,-7,33,-6,-67,-8,]),'UNTIL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,34,-21,34,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,34,-15,-16,-17,-19,34,-67,34,34,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,34,34,34,-67,-7,34,-6,-67,-8,]),'WHILE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,35,-21,35,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,35,-15,-16,-17,-19,35,-67,35,35,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,35,35,35,-67,-7,35,-6,-67,-8,]),'CASE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,188,193,],[-67,-67,36,-21,36,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,36,-15,-16,-17,-19,36,-67,36,36,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,36,36,36,-67,-7,36,-6,-67,36,-8,]),'VERT':([11,12,15,16,17,35,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,104,109,122,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,193,],[-67,-67,38,-21,38,38,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,38,-15,-16,-17,-19,38,-67,38,38,38,38,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,38,38,38,-67,-7,38,-6,-67,-8,]),'ELSE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,147,148,149,160,161,162,163,164,166,167,168,170,173,174,175,176,177,178,181,185,187,188,193,],[-67,-67,39,-21,39,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,39,-15,-16,-17,-19,39,-67,39,39,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,39,39,39,-67,-7,39,-6,-67,39,-8,]),'SEMICOLON':([11,12,15,16,17,18,23,24,26,28,29,30,32,37,40,41,47,48,50,51,52,53,54,56,58,62,63,64,66,68,74,75,76,77,83,84,86,87,88,92,94,95,105,107,109,116,117,119,120,121,123,124,125,126,127,132,133,145,146,147,148,149,150,151,157,160,161,162,163,164,166,167,168,169,170,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,193,194,],[-67,-67,-67,-21,-67,42,47,48,50,52,53,54,56,-48,-50,69,-67,-67,-67,-67,-67,-67,-67,-67,-67,-60,-61,-62,-67,-67,-10,-22,-23,-11,-13,-67,-15,-16,-17,-19,-67,-67,-51,-55,-67,145,146,147,148,149,-67,-56,-57,-59,-58,-63,-49,-67,-67,-67,-67,-67,-45,-46,170,-9,-12,-14,-18,-20,-67,-67,-67,177,-67,-67,-67,-67,-67,-67,-7,187,-67,-67,-67,-67,-6,-67,-67,-52,-53,-54,-8,-47,]),'BREAK':([16,47,48,50,51,52,53,54,56,74,75,76,77,83,84,86,87,88,92,145,146,147,148,149,160,161,162,163,164,170,177,178,185,187,193,],[-21,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,118,-15,-16,-17,-19,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-7,-6,-67,-8,]),'NUMBER':([35,96,97,98,99,100,101,102,103,104,106,114,122,134,159,192,],[61,125,-34,-35,-36,-37,-38,-39,126,61,129,136,61,136,136,136,]),'TRUE':([35,104,106,114,122,134,159,192,],[62,62,130,137,62,137,137,137,]),'FALSE':([35,104,106,114,122,134,159,192,],[63,63,131,138,63,138,138,138,]),'WHEN':([36,66,182,183,184,],[65,106,106,106,106,]),'NORTH':([49,],[79,]),'SOUTH':([49,],[80,]),'EAST':([49,],[81,]),'WEST':([49,],[82,]),'STRING':([55,],[90,]),'GT':([60,61,],[97,97,]),'LT':([60,61,],[98,98,]),'GET':([60,61,],[99,99,]),'LET':([60,61,],[100,100,]),'EQ':([60,61,],[101,101,]),'DT':([60,61,],[102,102,]),'NUMVAL':([70,],[112,]),'BOOLVAL':([70,],[113,]),'COMMA':([71,72,111,112,113,140,141,142,143,144,171,186,],[114,115,134,-24,-25,159,-30,-31,-32,-33,179,192,]),'ADD':([115,179,],[141,141,]),'SUB':([115,179,],[142,142,]),'MUL':([115,179,],[143,143,]),'DIV':([115,179,],[144,144,]),'THEN':([129,130,131,152,],[153,154,155,165,]),}
+_lr_action_items = {'COMMENT':([0,47,48,50,52,53,54,56,145,146,147,148,149,150,172,179,189,],[2,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'$end':([1,2,3,5,6,8,10,13,14,42,69,110,],[0,-67,-67,-5,-67,-3,-67,-1,-66,-2,-67,-4,]),'PROCEDURE':([2,3,5,6,8,42,69,110,],[4,-67,-5,4,-3,-2,4,-4,]),'PRINCIPAL':([2,3,5,69,110,],[-67,7,-5,-67,-4,]),'ID':([4,19,35,36,44,45,46,55,57,67,96,97,98,99,100,101,102,103,104,122,159,],[9,43,60,66,71,72,73,91,93,108,124,-34,-35,-36,-37,-38,-39,127,60,60,173,]),'LPARENT':([7,9,20,21,22,25,27,31,33,34,38,39,43,59,62,63,64,65,124,125,126,127,132,139,154,155,156,167,],[11,12,44,45,46,49,51,55,57,58,67,68,70,95,-60,-61,-62,104,-56,-57,-59,-58,-63,159,168,169,170,175,]),'RPARENT':([11,12,15,16,17,47,48,50,52,53,54,56,58,62,63,64,68,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,123,124,125,126,127,128,132,135,136,137,138,145,146,147,148,149,150,157,161,162,163,164,165,166,168,169,170,172,174,175,176,177,178,179,180,183,187,189,195,197,198,],[-67,-67,18,-21,41,-67,-67,-67,-67,-67,-67,-67,-67,-60,-61,-62,-67,116,-10,-22,-23,-11,117,-40,-41,-42,-43,-13,119,-15,-16,-17,120,-64,-65,-19,121,122,-67,132,133,152,-56,-57,-59,-58,153,-63,158,-26,-27,-28,-67,-67,-67,-67,-67,-67,171,-9,-12,-44,-14,-18,-20,-67,-67,-67,-67,182,-67,184,185,186,-67,-7,190,-6,-67,-8,198,-29,]),'NEW':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,19,-21,19,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,19,-15,-16,-17,-19,19,-67,19,19,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,19,19,19,-67,-7,19,-6,-67,-8,]),'VALUES':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,20,-21,20,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,20,-15,-16,-17,-19,20,-67,20,20,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,20,20,20,-67,-7,20,-6,-67,-8,]),'ALTER':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,114,123,134,145,146,148,149,150,160,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,194,195,],[-67,-67,21,-21,21,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,21,-15,-16,-17,-19,21,-67,21,139,21,139,-67,-67,-67,-67,-67,139,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,21,21,21,-67,-7,21,-6,-67,139,-8,]),'ALTERB':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,22,-21,22,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,22,-15,-16,-17,-19,22,-67,22,22,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,22,22,22,-67,-7,22,-6,-67,-8,]),'MOVR':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,23,-21,23,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,23,-15,-16,-17,-19,23,-67,23,23,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,23,23,23,-67,-7,23,-6,-67,-8,]),'MOVL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,24,-21,24,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,24,-15,-16,-17,-19,24,-67,24,24,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,24,24,24,-67,-7,24,-6,-67,-8,]),'HAMMER':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,25,-21,25,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,25,-15,-16,-17,-19,25,-67,25,25,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,25,25,25,-67,-7,25,-6,-67,-8,]),'STOP':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,26,-21,26,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,26,-15,-16,-17,-19,26,-67,26,26,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,26,26,26,-67,-7,26,-6,-67,-8,]),'REPEAT':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,27,-21,27,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,27,-15,-16,-17,-19,27,-67,27,27,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,27,27,27,-67,-7,27,-6,-67,-8,]),'PRINT':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,31,-21,31,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,31,-15,-16,-17,-19,31,-67,31,31,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,31,31,31,-67,-7,31,-6,-67,-8,]),'CALL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,33,-21,33,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,33,-15,-16,-17,-19,33,-67,33,33,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,33,33,33,-67,-7,33,-6,-67,-8,]),'UNTIL':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,34,-21,34,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,34,-15,-16,-17,-19,34,-67,34,34,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,34,34,34,-67,-7,34,-6,-67,-8,]),'WHILE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,35,-21,35,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,35,-15,-16,-17,-19,35,-67,35,35,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,35,35,35,-67,-7,35,-6,-67,-8,]),'CASE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,190,195,],[-67,-67,36,-21,36,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,36,-15,-16,-17,-19,36,-67,36,36,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,36,36,36,-67,-7,36,-6,-67,36,-8,]),'VERT':([11,12,15,16,17,35,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,104,109,122,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,195,],[-67,-67,38,-21,38,38,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,38,-15,-16,-17,-19,38,-67,38,38,38,38,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,38,38,38,-67,-7,38,-6,-67,-8,]),'ELSE':([11,12,15,16,17,47,48,50,51,52,53,54,56,58,68,74,75,76,77,83,84,86,87,88,92,94,95,109,123,145,146,148,149,150,161,162,164,165,166,168,169,170,172,175,176,177,178,179,180,183,187,189,190,195,],[-67,-67,39,-21,39,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,39,-15,-16,-17,-19,39,-67,39,39,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-67,-67,-67,39,39,39,-67,-7,39,-6,-67,39,-8,]),'SEMICOLON':([11,12,15,16,17,18,23,24,26,28,29,30,32,37,40,41,47,48,50,51,52,53,54,56,58,62,63,64,66,68,74,75,76,77,83,84,86,87,88,92,94,95,105,107,109,116,117,118,119,120,121,123,124,125,126,127,132,133,145,146,148,149,150,151,152,158,161,162,164,165,166,168,169,170,171,172,175,176,177,178,179,180,182,183,184,185,186,187,189,190,191,192,193,195,196,],[-67,-67,-67,-21,-67,42,47,48,50,52,53,54,56,-48,-50,69,-67,-67,-67,-67,-67,-67,-67,-67,-67,-60,-61,-62,-67,-67,-10,-22,-23,-11,-13,-67,-15,-16,-17,-19,-67,-67,-51,-55,-67,145,146,147,148,149,150,-67,-56,-57,-59,-58,-63,-49,-67,-67,-67,-67,-67,-45,-46,172,-9,-12,-14,-18,-20,-67,-67,-67,179,-67,-67,-67,-67,-67,-67,-7,189,-67,-67,-67,-67,-6,-67,-67,-52,-53,-54,-8,-47,]),'BREAK':([16,47,48,50,51,52,53,54,56,74,75,76,77,83,84,86,87,88,92,145,146,148,149,150,161,162,164,165,166,172,179,180,187,189,195,],[-21,-67,-67,-67,-67,-67,-67,-67,-67,-10,-22,-23,-11,-13,118,-15,-16,-17,-19,-67,-67,-67,-67,-67,-9,-12,-14,-18,-20,-67,-67,-7,-6,-67,-8,]),'NUMBER':([35,96,97,98,99,100,101,102,103,104,106,114,122,134,160,194,],[61,125,-34,-35,-36,-37,-38,-39,126,61,129,136,61,136,136,136,]),'TRUE':([35,104,106,114,122,134,160,194,],[62,62,130,137,62,137,137,137,]),'FALSE':([35,104,106,114,122,134,160,194,],[63,63,131,138,63,138,138,138,]),'WHEN':([36,66,184,185,186,],[65,106,106,106,106,]),'NORTH':([49,],[79,]),'SOUTH':([49,],[80,]),'EAST':([49,],[81,]),'WEST':([49,],[82,]),'STRING':([55,],[90,]),'GT':([60,61,],[97,97,]),'LT':([60,61,],[98,98,]),'GET':([60,61,],[99,99,]),'LET':([60,61,],[100,100,]),'EQ':([60,61,],[101,101,]),'DT':([60,61,],[102,102,]),'NUMVAL':([70,],[112,]),'BOOLVAL':([70,],[113,]),'COMMA':([71,72,111,112,113,140,141,142,143,144,173,188,],[114,115,134,-24,-25,160,-30,-31,-32,-33,181,194,]),'ADD':([115,181,],[141,141,]),'SUB':([115,181,],[142,142,]),'MUL':([115,181,],[143,143,]),'DIV':([115,181,],[144,144,]),'THEN':([129,130,131,153,],[154,155,156,167,]),}
 
 _lr_action = {}
 for _k, _v in _lr_action_items.items():
@@ -17,7 +17,7 @@
       _lr_action[_x][_k] = _y
 del _lr_action_items
 
-_lr_goto_items = {'program':([0,],[1,]),'procedures':([2,6,69,],[3,10,110,]),'empty':([2,3,6,10,11,12,15,17,47,48,50,51,52,53,54,56,58,66,68,69,84,94,95,109,123,145,146,147,148,149,166,167,168,170,173,174,175,176,177,181,182,183,184,187,188,],[5,8,5,14,16,16,40,40,76,76,76,16,76,76,76,76,16,107,16,5,40,40,16,40,40,76,76,76,76,76,16,16,16,76,16,40,40,40,76,40,107,107,107,76,40,]),'principal':([3,],[6,]),'end':([10,],[13,]),'instructions':([11,12,51,58,68,95,166,167,168,173,],[15,17,84,94,109,123,174,175,176,181,]),'untilbody':([15,17,84,94,109,123,174,175,176,181,],[28,28,28,28,28,28,28,28,28,28,]),'whilebody':([15,17,84,94,109,123,174,175,176,181,],[29,29,29,29,29,29,29,29,29,29,]),'casebody':([15,17,84,94,109,123,174,175,176,181,188,],[30,30,30,30,30,30,30,30,30,30,194,]),'istrue':([15,17,35,84,94,104,109,122,123,174,175,176,181,],[32,32,64,32,32,64,32,64,32,32,32,32,32,]),'case_else':([15,17,84,94,109,123,174,175,176,181,188,],[37,37,37,37,37,37,37,37,37,37,37,]),'condition':([35,104,122,],[59,128,150,]),'commentary':([47,48,50,52,53,54,56,145,146,147,148,149,170,177,187,],[74,77,83,86,87,88,92,160,161,162,163,164,178,185,193,]),'position':([49,],[78,]),'repeat_instructions':([51,],[85,]),'startvalue':([55,],[89,]),'comparator':([60,61,],[96,103,]),'innercasebody':([66,182,183,184,],[105,189,190,191,]),'datatype':([70,],[111,]),'value':([114,134,159,192,],[135,156,172,195,]),'operator':([115,179,],[140,186,]),}
+_lr_goto_items = {'program':([0,],[1,]),'procedures':([2,6,69,],[3,10,110,]),'empty':([2,3,6,10,11,12,15,17,47,48,50,51,52,53,54,56,58,66,68,69,84,94,95,109,123,145,146,147,148,149,150,168,169,170,172,175,176,177,178,179,183,184,185,186,189,190,],[5,8,5,14,16,16,40,40,76,76,76,16,76,76,76,76,16,107,16,5,40,40,16,40,40,76,76,76,76,76,76,16,16,16,76,16,40,40,40,76,40,107,107,107,76,40,]),'principal':([3,],[6,]),'end':([10,],[13,]),'instructions':([11,12,51,58,68,95,168,169,170,175,],[15,17,84,94,109,123,176,177,178,183,]),'untilbody':([15,17,84,94,109,123,176,177,178,183,],[28,28,28,28,28,28,28,28,28,28,]),'whilebody':([15,17,84,94,109,123,176,177,178,183,],[29,29,29,29,29,29,29,29,29,29,]),'casebody':([15,17,84,94,109,123,176,177,178,183,190,],[30,30,30,30,30,30,30,30,30,30,196,]),'istrue':([15,17,35,84,94,104,109,122,123,176,177,178,183,],[32,32,64,32,32,64,32,64,32,32,32,32,32,]),'case_else':([15,17,84,94,109,123,176,177,178,183,190,],[37,37,37,37,37,37,37,37,37,37,37,]),'condition':([35,104,122,],[59,128,151,]),'commentary':([47,48,50,52,53,54,56,145,146,147,148,149,150,172,179,189,],[74,77,83,86,87,88,92,161,162,163,164,165,166,180,187,195,]),'position':([49,],[78,]),'repeat_instructions':([51,],[85,]),'startvalue':([55,],[89,]),'comparator':([60,61,],[96,103,]),'innercasebody':([66,184,185,186,],[105,191,192,193,]),'datatype':([70,],[111,]),'value':([114,134,160,194,],[135,157,174,197,]),'operator':([115,181,],[140,188,]),}
 
 _lr_goto = {}
 for _k, _v in _lr_goto_items.items():
@@ -70,7 +70,7 @@
   ('position -> SOUTH','position',1,'p_position2','SyntaxAnalyzer.py',220),
   ('position -> EAST','position',1,'p_position3','SyntaxAnalyzer.py',225),
   ('position -> WEST','position',1,'p_position4','SyntaxAnalyzer.py',230),
-  ('repeat_instructions -> instructions BREAK','repeat_instructions',2,'p_repeatInstructions','SyntaxAnalyzer.py',235),
+  ('repeat_instructions -> instructions BREAK SEMICOLON commentary','repeat_instructions',4,'p_repeatInstructions','SyntaxAnalyzer.py',235),
   ('untilbody -> UNTIL LPARENT instructions RPARENT condition','untilbody',5,'p_untilbody','SyntaxAnalyzer.py',240),
   ('whilebody -> WHILE condition LPARENT instructions RPARENT','whilebody',5,'p_whilebody','SyntaxAnalyzer.py',245),
   ('casebody -> CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody','casebody',10,'p_casebody1','SyntaxAnalyzer.py',250),
