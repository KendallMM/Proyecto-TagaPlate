Index: SyntaxAnalyzer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import ply.yacc as yacc\r\nfrom LexicalAnalyzer import tokens\r\nfrom ParseTree import *\r\n\r\nerr = ''\r\nerrorCounter = 0\r\nsem_tree = None\r\n\r\n\r\ndef p_program(p):\r\n    '''program : COMMENT procedures principal procedures end'''\r\n    p[0] = Program(p[1], p[2], p[3], p[4], p[5], 'Program')\r\n    global sem_tree\r\n    sem_tree = p[0]\r\n\r\n\r\ndef p_principal(p):\r\n    '''principal : PRINCIPAL LPARENT instructions RPARENT SEMICOLON'''\r\n    p[0] = Principal(p[1], p[2], p[3], p[4], p[5], 'Principal')\r\n\r\n\r\ndef p_principalEmpty(p):\r\n    '''principal : empty'''\r\n    global err, errorCounter\r\n    err = \"Syntax error: Principal method not found.\"\r\n    errorCounter = errorCounter + 2\r\n    p[0] = NullNode()\r\n\r\n\r\ndef p_procedures(p):\r\n    '''procedures : PROCEDURE ID LPARENT instructions RPARENT SEMICOLON procedures'''\r\n    p[0] = Procedures(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'Procedure')\r\n\r\n\r\ndef p_proceduresEmpty(p):\r\n    '''procedures : empty'''\r\n    p[0] = NullNode()\r\n\r\n\r\ndef p_instructions1(p):\r\n    '''instructions : instructions NEW ID LPARENT datatype COMMA value RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions1(p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[1], 'Instructions1')\r\n\r\n\r\ndef p_instructions2(p):\r\n    '''instructions : instructions VALUES LPARENT ID COMMA value RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions2(p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[1], 'Instructions2')\r\n    global children\r\n    children = len(p) - 1\r\n    print(children)\r\n\r\n\r\ndef p_instructions3(p):\r\n    '''instructions : instructions ALTER LPARENT ID COMMA operator COMMA value RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions3(p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[1], 'Instructions3')\r\n    global children\r\n    children = len(p) - 1\r\n    print(children)\r\n\r\n\r\ndef p_instructions4(p):\r\n    '''instructions : instructions ALTERB LPARENT ID RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions4(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions4')\r\n\r\n\r\ndef p_instructions5(p):\r\n    '''instructions : instructions MOVR SEMICOLON commentary'''\r\n    p[0] = Instructions5(p[2], p[3], p[4], p[1], 'Instructions5')\r\n\r\n\r\ndef p_instructions6(p):\r\n    '''instructions : instructions MOVL SEMICOLON commentary'''\r\n    p[0] = Instructions6(p[2], p[3], p[4], p[1], 'Instructions6')\r\n\r\n\r\ndef p_instructions7(p):\r\n    '''instructions : instructions HAMMER LPARENT position RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions7(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions7')\r\n\r\n\r\ndef p_instructions8(p):\r\n    '''instructions : instructions STOP SEMICOLON commentary'''\r\n    p[0] = Instructions8(p[2], p[3], p[4], p[1], 'Instructions8')\r\n\r\n\r\ndef p_instructions9(p):\r\n    '''instructions : instructions REPEAT LPARENT repeat_instructions RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions9(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions9')\r\n\r\n\r\ndef p_instructions10(p):\r\n    '''instructions : instructions untilbody SEMICOLON commentary'''\r\n    p[0] = Instructions10(p[2], p[3], p[4], p[1], 'Instructions10')\r\n\r\n\r\ndef p_instructions11(p):\r\n    '''instructions : instructions whilebody SEMICOLON commentary'''\r\n    p[0] = Instructions11(p[2], p[3], p[4], p[1], 'Instructions11')\r\n\r\n\r\ndef p_instructions12(p):\r\n    '''instructions : instructions casebody SEMICOLON commentary'''\r\n    p[0] = Instructions12(p[2], p[3], p[4], p[1], 'Instructions12')\r\n\r\n\r\ndef p_instructions13(p):\r\n    '''instructions : instructions PRINT LPARENT startvalue RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions13(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions13')\r\n\r\n\r\ndef p_instructions14(p):\r\n    '''instructions : instructions istrue SEMICOLON commentary'''\r\n    p[0] = Instructions14(p[2], p[3], p[4], p[1], 'Instructions14')\r\n\r\n\r\ndef p_instructions15(p):\r\n    '''instructions : instructions CALL LPARENT ID RPARENT SEMICOLON commentary'''\r\n    p[0] = Instructions15(p[2], p[3], p[4], p[5], p[6], p[7], p[1], 'Instructions15')\r\n\r\n\r\ndef p_instructionsEmpty(p):\r\n    '''instructions : empty'''\r\n    p[0] = NullNode()\r\n\r\n\r\ndef p_commentary1(p):\r\n    '''commentary : COMMENT'''\r\n    p[0] = Commentary1(p[1], 'Commentary1')\r\n\r\ndef p_commentary2(p):\r\n    '''commentary : empty'''\r\n    p[0] = NullNode()\r\n\r\ndef p_datatype1(p):\r\n    '''datatype : NUMVAL'''\r\n    p[0] = DataType1(p[1], 'DataType1')\r\n\r\n\r\ndef p_datatype2(p):\r\n    '''datatype : BOOLVAL'''\r\n    p[0] = DataType2(p[1], 'DataType2')\r\n\r\n\r\ndef p_value1(p):\r\n    '''value : NUMBER'''\r\n    p[0] = Value1(p[1], 'Value1')\r\n\r\n\r\ndef p_value2(p):\r\n    '''value : TRUE'''\r\n    p[0] = Value2(p[1], 'Value2')\r\n\r\n\r\ndef p_value3(p):\r\n    '''value : FALSE'''\r\n    p[0] = Value3(p[1], 'Value3')\r\n\r\n\r\ndef p_value4(p):\r\n    '''value : ALTER LPARENT ID COMMA operator COMMA value RPARENT'''\r\n    p[0] = Value4(p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], 'Value4')\r\n\r\n\r\ndef p_operator1(p):\r\n    '''operator : ADD'''\r\n    p[0] = Operator1(p[1], 'Operator1')\r\n\r\n\r\ndef p_operator2(p):\r\n    '''operator : SUB'''\r\n    p[0] = Operator2(p[1], 'Operator2')\r\n\r\n\r\ndef p_operator3(p):\r\n    '''operator : MUL'''\r\n    p[0] = Operator3(p[1], 'Operator3')\r\n\r\n\r\ndef p_operator4(p):\r\n    '''operator : DIV'''\r\n    p[0] = Operator4(p[1], 'Operator4')\r\n\r\n\r\ndef p_comparator1(p):\r\n    '''comparator : GT'''\r\n    p[0] = Comparator1(p[1], 'Comparator1')\r\n\r\n\r\ndef p_comparator2(p):\r\n    '''comparator : LT'''\r\n    p[0] = Comparator2(p[1], 'Comparator2')\r\n\r\n\r\ndef p_comparator3(p):\r\n    '''comparator : GET'''\r\n    p[0] = Comparator3(p[1], 'Comparator3')\r\n\r\n\r\ndef p_comparator4(p):\r\n    '''comparator : LET'''\r\n    p[0] = Comparator4(p[1], 'Comparator4')\r\n\r\n\r\ndef p_comparator5(p):\r\n    '''comparator : EQ'''\r\n    p[0] = Comparator5(p[1], 'Comparator5')\r\n\r\n\r\ndef p_comparator6(p):\r\n    '''comparator : DT'''\r\n    p[0] = Comparator6(p[1], 'Comparator6')\r\n\r\n\r\ndef p_position1(p):\r\n    '''position : NORTH'''\r\n    p[0] = Position1(p[1], 'Position1')\r\n\r\n\r\ndef p_position2(p):\r\n    '''position : SOUTH'''\r\n    p[0] = Position2(p[1], 'Position2')\r\n\r\n\r\ndef p_position3(p):\r\n    '''position : EAST'''\r\n    p[0] = Position3(p[1], 'Position3')\r\n\r\n\r\ndef p_position4(p):\r\n    '''position : WEST'''\r\n    p[0] = Position4(p[1], 'Position4')\r\n\r\n\r\ndef p_repeatInstructions(p):\r\n    '''repeat_instructions : instructions BREAK'''\r\n    p[0] = RepeatInstructions(p[1], p[2], 'RepeatInstructions')\r\n\r\n\r\ndef p_untilbody(p):\r\n    '''untilbody : UNTIL LPARENT instructions RPARENT condition'''\r\n    p[0] = UntilBody(p[1], p[2], p[3], p[4], p[5], 'UntilBody')\r\n\r\n\r\ndef p_whilebody(p):\r\n    '''whilebody : WHILE condition LPARENT instructions RPARENT'''\r\n    p[0] = WhileBody(p[1], p[2], p[3], p[4], p[5], 'WhileBody')\r\n\r\n\r\ndef p_casebody1(p):\r\n    '''casebody : CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT case_else'''\r\n    p[0] = CaseBody1(p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], 'CaseBody1')\r\n\r\n\r\ndef p_case_else1(p):\r\n    '''case_else : ELSE LPARENT instructions RPARENT'''\r\n    p[0] = CaseElse1(p[1], p[2], p[3], p[4], 'CaseElse1')\r\n\r\n\r\ndef p_case_else2(p):\r\n    '''case_else : empty'''\r\n    p[0] = NullNode()\r\n\r\n\r\ndef p_casebody3(p):\r\n    '''casebody : CASE ID innercasebody'''\r\n    p[0] = CaseBody3(p[1], p[2], p[3], 'CaseBody3')\r\n\r\n\r\ndef p_innercasebody1(p):\r\n    '''innercasebody : WHEN NUMBER THEN LPARENT instructions RPARENT innercasebody'''\r\n    p[0] = InnerCaseBody1(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'InnerCaseBody1')\r\n\r\n\r\ndef p_innercasebody2(p):\r\n    '''innercasebody : WHEN TRUE THEN LPARENT instructions RPARENT innercasebody'''\r\n    p[0] = InnerCaseBody2(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'InnerCaseBody2')\r\n\r\n\r\ndef p_innercasebody3(p):\r\n    '''innercasebody : WHEN FALSE THEN LPARENT instructions RPARENT innercasebody'''\r\n    p[0] = InnerCaseBody3(p[1], p[2], p[3], p[4], p[5], p[6], p[7], 'InnerCaseBody3')\r\n\r\n\r\ndef p_innercasebodyEmpty(p):\r\n    '''innercasebody : empty'''\r\n\r\n\r\ndef p_condition1(p):\r\n    '''condition : ID comparator ID'''\r\n    p[0] = Condition1(p[1], p[2], p[3], 'Condition1')\r\n\r\n\r\ndef p_condition2(p):\r\n    '''condition : ID comparator NUMBER'''\r\n    p[0] = Condition2(p[1], p[2], p[3], 'Condition2')\r\n\r\n\r\ndef p_condition3(p):\r\n    '''condition : NUMBER comparator ID'''\r\n    p[0] = Condition3(p[1], p[2], p[3], 'Condition3')\r\n\r\n\r\ndef p_condition4(p):\r\n    '''condition : NUMBER comparator NUMBER'''\r\n    p[0] = Condition4(p[1], p[2], p[3], 'Condition4')\r\n\r\n\r\ndef p_condition5(p):\r\n    '''condition : TRUE'''\r\n    p[0] = Condition5(p[1], 'Condition5')\r\n\r\n\r\ndef p_condition6(p):\r\n    '''condition : FALSE'''\r\n    p[0] = Condition6(p[1], 'Condition6')\r\n\r\n\r\ndef p_condition7(p):\r\n    '''condition : istrue'''\r\n    p[0] = Condition7(p[1], 'Condition7')\r\n\r\n\r\ndef p_istrue(p):\r\n    '''istrue : VERT LPARENT ID RPARENT'''\r\n    p[0] = IsTrue(p[1], p[2], p[3], p[4], 'IsTrue')\r\n\r\n\r\ndef p_startvalue1(p):\r\n    '''startvalue : STRING'''\r\n    p[0] = StartValue1(p[1], 'StartValue1')\r\n\r\n\r\ndef p_startvalue2(p):\r\n    '''startvalue : ID'''\r\n    p[0] = StartValue2(p[1], 'StartValue2')\r\n\r\ndef p_end(p):\r\n    '''end : empty'''\r\n    p[0] = EndNode()\r\n\r\ndef p_empty(p):\r\n    '''empty :'''\r\n    pass\r\n\r\n\r\ndef p_error(p):\r\n    global err\r\n    global errorCounter\r\n    errorCounter = errorCounter + 2\r\n    if p:\r\n        if p.type != 'COMMENT' and p.lineno == 1:\r\n            err = \"Syntax error on line 1: Missing expected initial comment.\"\r\n        else:\r\n            err = \"Syntax error on line %d: %s does not match %s position.\" % (p.lineno, p.value, p.type)\r\n\r\n\r\ndef syntax_analysis(path):\r\n    global errorCounter\r\n    parser = yacc.yacc('LALR')\r\n    result = parser.parse(open(path).read())\r\n    if (errorCounter == 0):\r\n        errorCounter = -1\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SyntaxAnalyzer.py b/SyntaxAnalyzer.py
--- a/SyntaxAnalyzer.py	
+++ b/SyntaxAnalyzer.py	
@@ -247,9 +247,13 @@
 
 
 def p_casebody1(p):
-    '''casebody : CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT case_else'''
+    '''casebody : CASE WHEN LPARENT condition RPARENT THEN LPARENT instructions RPARENT casebody'''
     p[0] = CaseBody1(p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], 'CaseBody1')
 
+def p_casebody2(p):
+    '''casebody : case_else'''
+    p[0] = CaseBody2(p[1], 'CaseBody2')
+
 
 def p_case_else1(p):
     '''case_else : ELSE LPARENT instructions RPARENT'''
Index: ParseTree.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\r\n\r\ntree_text = '\\n'\r\n\r\ninit_procs = []\r\ncalled_procs = []\r\n\r\nglobal_vars = []\r\nlocal_vars = []\r\nerr = ''\r\n\r\n\r\ndef check_variable(var_name):\r\n    # Check if variable exists\r\n    global err, global_vars, local_vars\r\n    flag = False\r\n    current = []\r\n    for var in global_vars:\r\n        if var_name == var[0]:\r\n            flag = True\r\n            current.append(var[0])\r\n            current.append(var[1])\r\n            current.append(var[2])\r\n            break\r\n    for var in local_vars:\r\n        if var_name == var[0]:\r\n            flag = True\r\n            current.append(var[0])\r\n            current.append(var[1])\r\n            current.append(var[2])\r\n            break\r\n    if not flag:\r\n        err = 'Semantic error: Variable ' + var_name + ' not defined.'\r\n    return current\r\n\r\n\r\ndef check_procedure(proc_name):\r\n    global err, init_procs\r\n    flag = False\r\n    current = ''\r\n    for proc in init_procs:\r\n        if proc_name == proc:\r\n            flag = True\r\n            current = proc_name\r\n            break\r\n    if not flag:\r\n        err = 'Semantic error: ' + proc_name + ' is not a defined procedure.'\r\n    return current\r\n\r\n\r\nclass Node:\r\n    pass\r\n\r\n\r\nclass NullNode(Node):\r\n    def __init__(self):\r\n        self.name = 'Null'\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        return self.name + ']'\r\n\r\n\r\nclass Program(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1):\r\n        global tree_text\r\n        tree_text += '[' + self.name + '\\n' + ident1\r\n\r\n        tree_text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        tree_text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        tree_text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        tree_text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        tree_text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        tree_text += ']'\r\n\r\n        print(tree_text)\r\n\r\n\r\nclass Principal(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.name = name\r\n\r\n        global global_vars, local_vars\r\n        global_vars += local_vars\r\n        local_vars.clear()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Procedures(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n        self.name = name\r\n\r\n        global local_vars, init_procs\r\n        local_vars.clear()\r\n        init_procs.append(self.son2)\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions1(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, nexxt, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n        self.son8 = son8\r\n        self.son9 = son9\r\n        self.nexxt = nexxt\r\n        self.name = name\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son7 + ']' + '\\n' + ident1\r\n        text += '[' + self.son8 + ']' + '\\n' + ident1\r\n        text += '[' + self.son9.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err, proc_type, global_vars, local_vars\r\n\r\n        # Valor asignado\r\n        if self.son4.son1 == 'Num' and (self.son6.son1 == 'True' or self.son6.son1 == 'False'):\r\n            err = 'Semantic error: Boolean value cannot be assigned to numeric variable'\r\n        elif self.son4.son1 == 'Bool' and re.search('\\d+', self.son6.son1):\r\n            err = 'Semantic error: Number value cannot be assigned to boolean variable'\r\n\r\n        # Variable con igual nombre\r\n        flag = False\r\n        for g in global_vars:\r\n            if self.son2 == g[0]:\r\n                err = 'Semantic error: Variable ' + self.son2 + ' defined multiple times.'\r\n                flag = True\r\n                break\r\n        for l in local_vars:\r\n            if self.son2 == l[0]:\r\n                err = 'Semantic error: Variable ' + self.son2 + ' defined multiple times.'\r\n                flag = True\r\n                break\r\n        if not flag:\r\n            local_vars.append([self.son2, self.son4.son1, self.son6.son1])\r\n\r\n\r\nclass Instructions2(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, nexxt, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n        self.son8 = son8\r\n        self.nexxt = nexxt\r\n        self.name = name\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7 + ']' + '\\n' + ident1\r\n        text += '[' + self.son8.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        current = check_variable(self.son3)\r\n        # Check if variable type matches with value\r\n        if current:\r\n            if current[1] == 'Bool' and re.search('\\d+', self.son5.son1):\r\n                err = 'Semantic error: Number value cannot be assigned to boolean variable'\r\n            elif current[1] == 'Num' and (self.son5.son1 == 'True' or self.son5.son1 == 'False'):\r\n                err = 'Semantic error: Boolean value cannot be assigned to numeric variable'\r\n\r\n\r\nclass Instructions3(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, son10, nexxt, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n        self.son8 = son8\r\n        self.son9 = son9\r\n        self.son10 = son10\r\n        self.nexxt = nexxt\r\n        self.name = name\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son8 + ']' + '\\n' + ident1\r\n        text += '[' + self.son9 + ']' + '\\n' + ident1\r\n        text += '[' + self.son10.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        current = check_variable(self.son3)\r\n        if current:\r\n            if current[1] == 'Bool':\r\n                err = 'Semantic error: Cannot operate boolean type variable.'\r\n            elif self.son7.son1 == 'True' or self.son7.son1 == 'False':\r\n                err = 'Semantic error: Cannot operate boolean value.'\r\n            elif self.son5.son1 == 'DIV' and self.son7.son1 == '0':\r\n                err = 'Semantic error: Cannot divide by zero.'\r\n\r\n\r\nclass Instructions4(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, nexxt, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.nexxt = nexxt\r\n        self.name = name\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        current = check_variable(self.son3)\r\n        if current:\r\n            if current[1] == 'Num':\r\n                err = 'Semantic error: AlterB cannot operate numeric variable.'\r\n\r\n\r\nclass Instructions5(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.nexxt = son4\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions6(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.nexxt = son4\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions7(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.nexxt = son7\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions8(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.nexxt = son4\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions9(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.nexxt = son7\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions10(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.nexxt = son4\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions11(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.nexxt = son4\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions12(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.nexxt = son4\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions13(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.nexxt = son7\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions14(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.nexxt = son4\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Instructions15(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.nexxt = son7\r\n        self.name = name\r\n        global called_procs\r\n        called_procs.append(self.son3)\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.nexxt.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Commentary1(Node):\r\n    def __init__(self, son1, name):\r\n        self.son1 = son1\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass DataType1(Node):\r\n    def __init__(self, son1, name):\r\n        self.son1 = son1\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass DataType2(Node):\r\n    def __init__(self, son1, name):\r\n        self.son1 = son1\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Value1(Node):\r\n    def __init__(self, son1, name):\r\n        self.son1 = son1\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Value2(Node):\r\n    def __init__(self, son1, name):\r\n        self.son1 = son1\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Value3(Node):\r\n    def __init__(self, son1, name):\r\n        self.son1 = son1\r\n        self.name = name\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Value4(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, name):\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n        self.son8 = son8\r\n        self.name = name\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son8 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        current = check_variable(self.son3)\r\n        if current:\r\n            if current[1] == 'Bool':\r\n                err = 'Semantic error: Cannot operate boolean type variable.'\r\n            elif self.son7.son1 == 'True' or self.son7.son1 == 'False':\r\n                err = 'Semantic error: Cannot operate boolean value.'\r\n\r\n\r\nclass Operator1(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Operator2(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Operator3(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Operator4(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Comparator1(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Comparator2(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Comparator3(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Comparator4(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Comparator5(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Comparator6(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Position1(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Position2(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Position3(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Position4(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass RepeatInstructions(Node):\r\n    def __init__(self, son1, son2, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass UntilBody(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass WhileBody(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass CaseBody1(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, son8, son9, son10, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n        self.son8 = son8\r\n        self.son9 = son9\r\n        self.son10 = son10\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son5 + ']' + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7 + ']' + '\\n' + ident1\r\n        text += '[' + self.son8.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son9 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass CaseElse1(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass CaseBody3(Node):\r\n    def __init__(self, son1, son2, son3, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass InnerCaseBody1(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass InnerCaseBody2(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass InnerCaseBody3(Node):\r\n    def __init__(self, son1, son2, son3, son4, son5, son6, son7, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.son5 = son5\r\n        self.son6 = son6\r\n        self.son7 = son7\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n' + ident1\r\n        text += '[' + self.son5.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son6 + ']' + '\\n' + ident1\r\n        text += '[' + self.son7.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass Condition1(Node):\r\n    def __init__(self, son1, son2, son3, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        current1 = check_variable(self.son1)\r\n        current2 = check_variable(self.son3)\r\n        if current1 and current2:\r\n            if current1[1] == 'Bool':\r\n                err = 'Semantic error: Cannot compare boolean variable ' + current1[0] + '.'\r\n            if current2[1] == 'Bool':\r\n                err = 'Semantic error: Cannot compare boolean variable ' + current2[0] + '.'\r\n\r\n\r\nclass Condition2(Node):\r\n    def __init__(self, son1, son2, son3, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err, global_vars\r\n        current = check_variable(self.son1)\r\n        if current:\r\n            if current[1] == 'Bool':\r\n                err = 'Semantic error: Cannot compare boolean variable ' + current[0] + '.'\r\n\r\n\r\nclass Condition3(Node):\r\n    def __init__(self, son1, son2, son3, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        current = check_variable(self.son3)\r\n        if current:\r\n            if current[1] == 'Bool':\r\n                err = 'Semantic error: Cannot compare boolean variable ' + current[0] + '.'\r\n\r\n\r\nclass Condition4(Node):\r\n    def __init__(self, son1, son2, son3, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2.printtxt(ident1 + '\\t', ident1) + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        if int(self.son1) > int(self.son3) and (self.son2.son1 == '>' or self.son2.son1 == '>='):\r\n            err = 'Semantic error: Condition is always true.'\r\n        elif int(self.son1) < int(self.son3) and (self.son2.son1 == '>' or self.son2.son1 == '>='):\r\n            err = 'Semantic error: Condition is always false.'\r\n        elif int(self.son1) < int(self.son3) and (self.son2.son1 == '<' or self.son2.son1 == '<='):\r\n            err = 'Semantic error: Condition is always true.'\r\n        elif int(self.son1) > int(self.son3) and (self.son2.son1 == '<' or self.son2.son1 == '<='):\r\n            err = 'Semantic error: Condition is always false.'\r\n        elif int(self.son1) == int(self.son3) and (self.son2.son1 == '=='):\r\n            err = 'Semantic error: Condition is always true.'\r\n        elif int(self.son1) != int(self.son3) and (self.son2.son1 == '=='):\r\n            err = 'Semantic error: Condition is always false.'\r\n\r\n\r\nclass Condition5(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        err = 'Semantic error: Condition is always ' + self.son1\r\n\r\n\r\nclass Condition6(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        err = 'Semantic error: Condition is always ' + self.son1\r\n\r\n\r\nclass Condition7(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1.printtxt(ident1 + '\\t', ident1) + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass IsTrue(Node):\r\n    def __init__(self, son1, son2, son3, son4, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n        self.son2 = son2\r\n        self.son3 = son3\r\n        self.son4 = son4\r\n        self.semantics()\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n' + ident1\r\n        text += '[' + self.son2 + ']' + '\\n' + ident1\r\n        text += '[' + self.son3 + ']' + '\\n' + ident1\r\n        text += '[' + self.son4 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n    def semantics(self):\r\n        global err\r\n        current = check_variable(self.son3)\r\n        if current:\r\n            if current[1] == 'Num':\r\n                err = 'Semantic error: Variable in IsTrue cannot be numeric.'\r\n\r\n\r\nclass StartValue1(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass StartValue2(Node):\r\n    def __init__(self, son1, name):\r\n        self.name = name\r\n        self.son1 = son1\r\n\r\n    def printtxt(self, ident1, ident2):\r\n        text = self.name + '\\n' + ident1\r\n\r\n        text += '[' + self.son1 + ']' + '\\n'\r\n\r\n        text += ident2 + ']'\r\n        return text\r\n\r\n\r\nclass EndNode(Node):\r\n    def __init__(self):\r\n        self.semantics()\r\n\r\n    def semantics(self):\r\n        global called_procs\r\n        for p in called_procs:\r\n            check_procedure(p)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ParseTree.py b/ParseTree.py
--- a/ParseTree.py	
+++ b/ParseTree.py	
@@ -973,6 +973,12 @@
         return text
 
 
+class CaseBody2(Node):
+    def __init__(self, son1, name):
+        self.son1 = son1
+        self.name = name
+
+
 class CaseElse1(Node):
     def __init__(self, son1, son2, son3, son4, name):
         self.name = name
Index: TagaPlate.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># IDE CODE TAGAPLATE\r\n\r\nimport tkinter as tk\r\nfrom tkinter.filedialog import askopenfilename, asksaveasfilename\r\nfrom tkinter import messagebox\r\nimport LexicalAnalyzer as lx\r\nimport SyntaxAnalyzer as sx\r\nimport ParseTree as prs\r\n\r\n# GLOBAL VARIABLES\r\ngpath = ''\r\nsaved = False\r\nerr_row = 1\r\npr_row = 1\r\n\r\nrunnable = False\r\ncompilation_errors = 0\r\nprint_txt = ''\r\n\r\n# MAIN WINDOW\r\nmain = tk.Tk()\r\nmain.title(\"TagaPlate IDE\")\r\n\r\n\r\n# _________________________________________ Line Number Class __________________________________________________________\r\n\r\nclass LineNumber(tk.Text):\r\n    def __init__(self, master, text_widget, **kwargs):\r\n        super().__init__(master, **kwargs)\r\n        self.text_widget = text_widget\r\n        self.text_widget.bind('<KeyRelease>', self.on_key_release)\r\n        self.insert(1.0, '1')\r\n        self.configure(state='disabled')\r\n\r\n    def on_key_release(self, event=None):\r\n        global saved, lineno\r\n        p, q = self.text_widget.index(\"@0,0\").split('.')\r\n        p = int(p)\r\n        final_index = str(self.text_widget.index(tk.END))\r\n        num_of_lines = final_index.split('.')[0]\r\n        lines = '\\n'.join(str(p + no) for no in range(int(num_of_lines) - 1))\r\n        width = len(str(num_of_lines))\r\n        self.configure(state='normal', width=width)\r\n        self.delete(1.0, tk.END)\r\n        self.insert(1.0, lines)\r\n        self.configure(state='disabled')\r\n        saved = False\r\n        update_title()\r\n\r\n\r\n# ____________________________________ File Functions ___________________________________________________________________\r\n\r\ndef new_file():\r\n    global gpath, saved\r\n    path = asksaveasfilename(filetypes=[('TagaPlate Files', '*.tgp')])\r\n    if path != '':\r\n        if not path.endswith(\".tgp\"):\r\n            path += \".tgp\"\r\n        else:\r\n            pass\r\n        file = open(path, 'w')\r\n        welcome = 'Welcome to new TagaPlate File!'\r\n        file.write(welcome)\r\n        textEditor.delete('1.0', tk.END)\r\n        textEditor.insert('1.0', welcome)\r\n        delete_errors()\r\n        delete_prints()\r\n        file.close()\r\n        gpath = path\r\n        lineText.on_key_release('<Enter>')\r\n        reset_file()\r\n    saved = True\r\n    update_title()\r\n\r\n\r\ndef open_file():\r\n    global gpath, saved\r\n    path = askopenfilename(filetypes=[('TagaPlate Files', '*.tgp')])\r\n    if path != '':\r\n        file = open(path, 'r')\r\n        code = file.read()\r\n        textEditor.delete('1.0', tk.END)\r\n        textEditor.insert('1.0', code)\r\n        delete_errors()\r\n        delete_prints()\r\n        gpath = path\r\n        file.close()\r\n        lineText.on_key_release('<Enter>')\r\n        highlight_keywords('<Enter>')\r\n        reset_file()\r\n    else:\r\n        print(\"No file selected\")\r\n    saved = True\r\n    update_title()\r\n\r\n\r\ndef save_as():\r\n    global gpath, saved\r\n    if gpath == '':\r\n        path = asksaveasfilename(filetypes=[('TagaPlate Files', '*.tgp')])\r\n    else:\r\n        path = gpath\r\n    if path != '':\r\n        if not path.endswith(\".tgp\"):\r\n            path += \".tgp\"\r\n        else:\r\n            pass\r\n        file = open(path, 'w')\r\n        code = textEditor.get('1.0', tk.END)\r\n        file.write(code)\r\n        file.close()\r\n        gpath = path\r\n        saved = True\r\n        update_title()\r\n        reset_file()\r\n    else:\r\n        saved = False\r\n        print(\"No file selected\")\r\n\r\n\r\ndef reset_file():\r\n    lx.err = ''\r\n    sx.err = ''\r\n    prs.err = ''\r\n    prs.global_vars.clear()\r\n    prs.local_vars.clear()\r\n    prs.init_procs.clear()\r\n    prs.called_procs.clear()\r\n\r\n\r\n# ________________________________________ Compile and Run Functions ____________________________________________________\r\n\r\n\r\ndef compile():\r\n    global gpath, saved, compilation_errors, runnable\r\n    if (gpath == '') or (gpath != '' and not saved):\r\n        compile_aux()\r\n    else:\r\n        compilation_errors = 0\r\n        runnable = False\r\n        prs.global_vars.clear()\r\n        prs.init_procs.clear()\r\n        lx.lexical_analisis(gpath)\r\n        lexical_error_check()\r\n        sx.syntax_analysis(gpath)\r\n        syntax_error_check()\r\n        semantic_error_check()\r\n        print('Errors during compilation: ' + str(compilation_errors))\r\n        if compilation_errors == 0:\r\n            runnable = True\r\n\r\n\r\ndef compile_aux():\r\n    if ask_to_save() == 'yes':\r\n        save_as()\r\n        compile()\r\n    else:\r\n        w_errors(\"Can't compile without saving file\")\r\n        show_errors()\r\n        tk.messagebox.showinfo('Uncompiled', \"Can't compile without saving file\", icon='warning')\r\n\r\n\r\ndef run():\r\n    global runnable, print_txt\r\n    compile()\r\n    runnable_tree = sx.sem_tree.son3.son3\r\n    print_txt = ''\r\n    delete_prints()\r\n    if runnable and runnable_tree:\r\n        counter = function_counter(runnable_tree)\r\n        return recursive_execution(runnable_tree, runnable_tree, counter, counter)\r\n\r\n\r\ndef function_counter(function):\r\n    counter = 0\r\n    while function.nexxt.name != 'Null':\r\n        counter += 1\r\n        function = function.nexxt\r\n    return counter\r\n\r\n\r\ndef recursive_execution(first, func, counter, instructions):\r\n    if instructions == 0:\r\n        execute(func)\r\n        write_printer()\r\n        return\r\n    if counter == 0:\r\n        execute(func)\r\n        write_printer()\r\n        return recursive_execution(first, first, instructions - 1, instructions - 1)\r\n    else:\r\n        counter -= 1\r\n        func = func.nexxt\r\n        return recursive_execution(first, func, counter, instructions)\r\n\r\n\r\ndef execute(function):\r\n    if function.name == 'Instructions2':\r\n        return values(function.son3, function.son5.son1)\r\n    elif function.name == 'Instructions3':\r\n        return alter(function.son3, function.son5.son1, function.son7.son1)\r\n    elif function.name == 'Instructions4':\r\n        return alter_b(function.son3)\r\n    elif function.name == 'Instructions5':\r\n        return move_right()\r\n    elif function.name == 'Instructions6':\r\n        return move_left()\r\n    elif function.name == 'Instructions7':\r\n        return hammer(function.son3.son1)\r\n    elif function.name == 'Instructions8':\r\n        return stop()\r\n    elif function.name == 'Instructions12':\r\n        if function.son1.name == 'CaseBody1':\r\n            return case1(function.son1.son4, function.son1.son8, function.son1.son10)\r\n        elif function.son1.name == 'CaseBody3':\r\n            return case3(function.son1.son2, function.son1.son3.son2, function.son1.son3.son5)\r\n    elif function.name == 'Instructions13':\r\n        return printer(function.son3)\r\n    elif function.name == 'Instructions14':\r\n        return is_true(function.son1.son3)\r\n    else:\r\n        pass\r\n\r\n\r\ndef values(name, value):\r\n    for v in sx.global_vars:\r\n        if v[0] == name:\r\n            v[2] = value\r\n\r\n\r\ndef alter(name, op, value):\r\n    for v in sx.global_vars:\r\n        if v[0] == name:\r\n            if op == 'ADD':\r\n                v[2] = str(int(v[2]) + int(value))\r\n                return v\r\n            elif op == 'SUB':\r\n                v[2] = str(int(v[2]) - int(value))\r\n                return v\r\n            elif op == 'MUL':\r\n                v[2] = str(int(v[2]) * int(value))\r\n                return v\r\n            elif op == 'DIV':\r\n                v[2] = str(int(v[2]) / int(value))\r\n                return v\r\n\r\n\r\ndef alter_b(name):\r\n    for v in sx.global_vars:\r\n        if v[0] == name:\r\n            if v[2] == 'True':\r\n                v[2] = 'False'\r\n                return v\r\n            else:\r\n                v[2] = 'True'\r\n                return v\r\n\r\n\r\ndef move_right():\r\n    print('Parte de Marco')\r\n\r\n\r\ndef move_left():\r\n    print('Parte de Marco')\r\n\r\n\r\ndef hammer(pos):\r\n    if pos == 'N':\r\n        print('Marco norte')\r\n    elif pos == 'S':\r\n        print('Marco sur')\r\n    elif pos == 'E':\r\n        print('Marco este')\r\n    elif pos == 'O':\r\n        print('Marco oeste')\r\n\r\n\r\ndef stop():\r\n    print('Parte Marco')\r\n\r\n\r\ndef case1(condition, instructions, else_body):\r\n    numbers = find_condition(condition)\r\n    count = function_counter(instructions)\r\n    if condition.son2.son1 == '>' and numbers[0] > numbers[1]:\r\n        return recursive_execution(instructions, instructions, count, count)\r\n    elif condition.son2.son1 == '<' and numbers[0] < numbers[1]:\r\n        return recursive_execution(instructions, instructions, count, count)\r\n    elif condition.son2.son1 == '>=' and numbers[0] >= numbers[1]:\r\n        return recursive_execution(instructions, instructions, count, count)\r\n    elif condition.son2.son1 == '<=' and numbers[0] <= numbers[1]:\r\n        return recursive_execution(instructions, instructions, count, count)\r\n    elif condition.son2.son1 == '==' and numbers[0] == numbers[1]:\r\n        return recursive_execution(instructions, instructions, count, count)\r\n    elif condition.son2.son1 == '<>' and numbers[0] != numbers[1]:\r\n        return recursive_execution(instructions, instructions, count, count)\r\n    elif else_body.name != 'NullNode':\r\n        count = function_counter(else_body.son3)\r\n        return recursive_execution(else_body.son3, else_body.son3, count, count)\r\n\r\n\r\ndef case3(name, value, instructions):\r\n    print('Hola')\r\n\r\n\r\ndef printer(args):\r\n    global print_txt\r\n    if args.son1[0] == \"\\\"\":\r\n        print_txt = args.son1\r\n    else:\r\n        for v in sx.global_vars:\r\n            if v[0] == args.son1:\r\n                print_txt = v[2]\r\n\r\n\r\ndef is_true(name):\r\n    for v in sx.global_vars:\r\n        if v[0] == name:\r\n            if v[2] == 'True':\r\n                return True\r\n            elif v[2] == 'False':\r\n                return False\r\n        else:\r\n            pass\r\n\r\n\r\ndef find_condition(condition):\r\n    num1 = 0\r\n    num2 = 0\r\n    try:\r\n        num1 = int(condition.son1)\r\n    except:\r\n        for x in sx.global_vars:\r\n            if x[0] == condition.son1:\r\n                num1 = int(x[2])\r\n    try:\r\n        num2 = int(condition.son3)\r\n    except:\r\n        for y in sx.global_vars:\r\n            if y[0] == condition.son3:\r\n                num2 = int(y[2])\r\n    return num1, num2\r\n\r\n\r\ndef ask_to_save():\r\n    return tk.messagebox.askquestion('Save first', 'Do you want to save your file?', icon='warning')\r\n\r\n\r\n# __________________________________________ IDE Modifier Functions _____________________________________________________\r\n\r\ndef set_dark():\r\n    textEditor.config(background='black', foreground='white')\r\n\r\n\r\ndef set_light():\r\n    textEditor.config(background='white', foreground='black')\r\n\r\n\r\ndef update_title():\r\n    global saved\r\n    if saved:\r\n        main.title('TagaPlate IDE')\r\n    else:\r\n        main.title('TagaPlate IDE (not saved)')\r\n\r\n\r\ndef highlight_keywords(event):\r\n    words = {'@Principal': 'orange',\r\n             'New': 'blue',\r\n             'True': 'blue',\r\n             'False': 'blue',\r\n             'While': 'blue',\r\n             'Until': 'blue',\r\n             'Case': 'blue',\r\n             'When': 'blue',\r\n             'Then': 'blue',\r\n             'Else': 'blue',\r\n             'Break': 'blue',\r\n             'Proc': 'blue',\r\n             'Values': 'red',\r\n             'Alter': 'red',\r\n             'AlterB': 'red',\r\n             'MoveRight': 'red',\r\n             'MoveLeft': 'red',\r\n             'Hammer': 'red',\r\n             'Stop': 'red',\r\n             'isTrue': 'red',\r\n             'Repeat': 'red',\r\n             'PrintValues': 'red',\r\n             'CALL': 'red'}\r\n    for k, c in words.items():\r\n        start_index = '1.0'\r\n        while True:\r\n            start_index = textEditor.search(k, start_index, tk.END)\r\n            if start_index:\r\n                end_index = textEditor.index('%s+%dc' % (start_index, (len(k))))\r\n                textEditor.tag_add(k, start_index, end_index)\r\n                textEditor.tag_config(k, foreground=c)\r\n                start_index = end_index\r\n            else:\r\n                break\r\n\r\n\r\n# _________________________________________ Error Management Functions _________________________________________________\r\n\r\ndef show_errors():\r\n    lx.err = ''\r\n    sx.err = ''\r\n    errorW.deiconify()\r\n\r\n\r\ndef exit_errors():\r\n    errorW.withdraw()\r\n\r\n\r\ndef w_errors(err_msg):\r\n    global err_row\r\n    t.config(state='normal')\r\n    t.insert(str(err_row) + '.0', err_msg + \"\\n\")\r\n    err_row += 1\r\n    t.pack()\r\n    t.config(state='disabled')\r\n\r\n\r\ndef lexical_error_check():\r\n    global compilation_errors\r\n    if lx.err != '':\r\n        compilation_errors += 1\r\n        w_errors(lx.err)\r\n        show_errors()\r\n    else:\r\n        pass\r\n\r\n\r\ndef syntax_error_check():\r\n    global compilation_errors\r\n    if sx.err != '':\r\n        compilation_errors += 1\r\n        w_errors(sx.err)\r\n        show_errors()\r\n    else:\r\n        pass\r\n\r\n\r\ndef semantic_error_check():\r\n    global compilation_errors\r\n    if prs.err != '':\r\n        compilation_errors += 1\r\n        w_errors(prs.err)\r\n        show_errors()\r\n    else:\r\n        pass\r\n\r\n\r\ndef delete_errors():\r\n    t.config(state='normal')\r\n    t.delete('1.0', tk.END)\r\n    t.config(state='disabled')\r\n\r\n\r\nerrorW = tk.Toplevel(main)\r\nerrorW.title(\"TagaPlate - Errors\")\r\nerrorW.geometry(\"500x300\")\r\nerrorW.protocol(\"WM_DELETE_WINDOW\", exit_errors)\r\nerrorW.withdraw()\r\nt = tk.Text(errorW)\r\nt.config(foreground='red', state='disabled')\r\n\r\n#_________________________________________ Print Management Functions ___________________________________________________\r\n\r\ndef show_prints():\r\n    printsW.deiconify()\r\n\r\n\r\ndef exit_prints():\r\n    printsW.withdraw()\r\n\r\n\r\ndef write_printer():\r\n    global print_txt\r\n    if print_txt != '':\r\n        set_print_text(print_txt)\r\n        show_prints()\r\n        print_txt = ''\r\n    else:\r\n        pass\r\n\r\n\r\ndef set_print_text(string):\r\n    global pr_row\r\n    t2.config(state='normal')\r\n    t2.insert(str(pr_row) + '.0', string + '\\n')\r\n    pr_row += 1\r\n    t2.pack()\r\n    t2.config(state='disabled')\r\n\r\n\r\ndef delete_prints():\r\n    t2.config(state='normal')\r\n    t2.delete('1.0', tk.END)\r\n    t2.config(state='disabled')\r\n\r\n\r\nprintsW = tk.Toplevel(main)\r\nprintsW.title(\"TagaPlate - Prints\")\r\nprintsW.geometry(\"500x300\")\r\nprintsW.protocol(\"WM_DELETE_WINDOW\", exit_prints)\r\nprintsW.withdraw()\r\nt2 = tk.Text(printsW)\r\nt2.config(foreground='green', state='disabled')\r\n\r\n\r\n# ________________________________________ IDE Editor ___________________________________________________________________\r\n\r\ntextEditor = tk.Text()\r\ntextEditor.config(background='white', foreground='black')\r\ntextEditor.pack(side=tk.RIGHT, expand=1)\r\ntextEditor.bind('<Key>', highlight_keywords)\r\n\r\nlineText = LineNumber(main, textEditor, width=1)\r\nlineText.pack(side=tk.LEFT)\r\n\r\n\r\n# ___________________________________________ IDE Menu Management _______________________________________________________\r\n\r\nmenuBar = tk.Menu(main)\r\n\r\nfileBar = tk.Menu(menuBar, tearoff=0)\r\nfileBar.add_command(label='New File', command=new_file)\r\nfileBar.add_command(label='Open File', command=open_file)\r\nfileBar.add_command(label='Save File As', command=save_as)\r\nmenuBar.add_cascade(label='File', menu=fileBar)\r\n\r\nrunBar = tk.Menu(menuBar, tearoff=0)\r\nrunBar.add_command(label='Compile', command=compile)\r\nrunBar.add_command(label='Compile and Run', command=run)\r\nmenuBar.add_cascade(label='Run', menu=runBar)\r\n\r\nthemeBar = tk.Menu(menuBar, tearoff=0)\r\nthemeBar.add_command(label='Dark', command=set_dark)\r\nthemeBar.add_command(label='Light', command=set_light)\r\n\r\nmenuBar.add_command(label='Errors', command=show_errors)\r\nmenuBar.add_command(label='Prints', command=show_prints)\r\n\r\nmenuBar.add_cascade(label='Theme', menu=themeBar)\r\n# _______________________________________________________________________________________________________________________\r\n\r\nmain.config(menu=menuBar)\r\nmain.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TagaPlate.py b/TagaPlate.py
--- a/TagaPlate.py	
+++ b/TagaPlate.py	
@@ -209,6 +209,8 @@
         return hammer(function.son3.son1)
     elif function.name == 'Instructions8':
         return stop()
+    elif function.name == 'Instructions10':
+        return until_function(function.son1.son5, function.son1.son3)
     elif function.name == 'Instructions12':
         if function.son1.name == 'CaseBody1':
             return case1(function.son1.son4, function.son1.son8, function.son1.son10)
@@ -279,7 +281,28 @@
     print('Parte Marco')
 
 
-def case1(condition, instructions, else_body):
+def until_function(condition, instructions):
+    numbers = find_condition(condition)
+    count = function_counter(instructions)
+    if condition.son2.son1 == '==' and numbers[0] != numbers[1]:
+        while numbers[0] != numbers[1]:
+            recursive_execution(instructions, instructions, count, count)
+            numbers = find_condition(condition)
+    elif (condition.son2.son1 == '>' or condition.son2.son1 == '>=') and numbers[0] < numbers[1]:
+        while numbers[0] < numbers[1]:
+            recursive_execution(instructions, instructions, count, count)
+            numbers = find_condition(condition)
+    elif (condition.son2.son1 == '<' or condition.son2.son1 == '<=') and numbers[0] > numbers[1]:
+        while numbers[0] > numbers[1]:
+            recursive_execution(instructions, instructions, count, count)
+            numbers = find_condition(condition)
+    elif condition.son2.son1 == '<>' and numbers[0] == numbers[1]:
+        while numbers[0] == numbers[1]:
+            recursive_execution(instructions, instructions, count, count)
+            numbers = find_condition(condition)
+
+
+def case1(condition, instructions, next_case):
     numbers = find_condition(condition)
     count = function_counter(instructions)
     if condition.son2.son1 == '>' and numbers[0] > numbers[1]:
@@ -294,9 +317,11 @@
         return recursive_execution(instructions, instructions, count, count)
     elif condition.son2.son1 == '<>' and numbers[0] != numbers[1]:
         return recursive_execution(instructions, instructions, count, count)
-    elif else_body.name != 'NullNode':
-        count = function_counter(else_body.son3)
-        return recursive_execution(else_body.son3, else_body.son3, count, count)
+    elif next_case.name != 'NullNode':
+        if next_case.name == 'CaseBody1':
+            return case1(next_case.son4, next_case.son8, next_case.son10)
+        elif next_case.name == 'CaseBody2' and next_case.son1.name == 'CaseElse1':
+            return recursive_execution(next_case.son1.son3, next_case.son1.son3, count, count)
 
 
 def case3(name, value, instructions):
